0100 typedef unsigned int   uint;
0101 typedef unsigned short ushort;
0102 typedef unsigned char  uchar;
0103 typedef uint pde_t;
0104 
0105 
0106 
0107 
0108 
0109 
0110 
0111 
0112 
0113 
0114 
0115 
0116 
0117 
0118 
0119 
0120 
0121 
0122 
0123 
0124 
0125 
0126 
0127 
0128 
0129 
0130 
0131 
0132 
0133 
0134 
0135 
0136 
0137 
0138 
0139 
0140 
0141 
0142 
0143 
0144 
0145 
0146 
0147 
0148 
0149 
0150 #define NPROC        64  
0151 #define KSTACKSIZE 4096  
0152 #define NCPU          8  
0153 #define NOFILE       16  
0154 #define NFILE       100  
0155 #define NINODE       50  
0156 #define NDEV         10  
0157 #define ROOTDEV       1  
0158 #define MAXARG       32  
0159 #define MAXOPBLOCKS  10  
0160 #define LOGSIZE      (MAXOPBLOCKS*3)  
0161 #define NBUF         (MAXOPBLOCKS*3)  
0162 #define FSSIZE       1000  
0163 
0164 
0165 
0166 
0167 
0168 
0169 
0170 
0171 
0172 
0173 
0174 
0175 
0176 
0177 
0178 
0179 
0180 
0181 
0182 
0183 
0184 
0185 
0186 
0187 
0188 
0189 
0190 
0191 
0192 
0193 
0194 
0195 
0196 
0197 
0198 
0199 
0200 
0201 
0202 #define EXTMEM  0x100000            
0203 #define PHYSTOP 0xE000000           
0204 #define DEVSPACE 0xFE000000         
0205 
0206 
0207 #define KERNBASE 0x80000000         
0208 #define KERNLINK (KERNBASE+EXTMEM)  
0209 
0210 #define V2P(a) (((uint) (a)) - KERNBASE)
0211 #define P2V(a) (((void *) (a)) + KERNBASE)
0212 
0213 #define V2P_WO(x) ((x) - KERNBASE)    
0214 #define P2V_WO(x) ((x) + KERNBASE)    
0215 
0216 
0217 
0218 
0219 
0220 
0221 
0222 
0223 
0224 
0225 
0226 
0227 
0228 
0229 
0230 
0231 
0232 
0233 
0234 
0235 
0236 
0237 
0238 
0239 
0240 
0241 
0242 
0243 
0244 
0245 
0246 
0247 
0248 
0249 
0250 struct buf;
0251 struct context;
0252 struct file;
0253 struct inode;
0254 struct pipe;
0255 struct proc;
0256 struct rtcdate;
0257 struct spinlock;
0258 struct stat;
0259 struct superblock;
0260 
0261 
0262 void            binit(void);
0263 struct buf*     bread(uint, uint);
0264 void            brelse(struct buf*);
0265 void            bwrite(struct buf*);
0266 
0267 
0268 void            consoleinit(void);
0269 void            cprintf(char*, ...);
0270 void            consoleintr(int(*)(void));
0271 void            panic(char*) __attribute__((noreturn));
0272 
0273 
0274 int             exec(char*, char**);
0275 
0276 
0277 struct file*    filealloc(void);
0278 void            fileclose(struct file*);
0279 struct file*    filedup(struct file*);
0280 void            fileinit(void);
0281 int             fileread(struct file*, char*, int n);
0282 int             filestat(struct file*, struct stat*);
0283 int             filewrite(struct file*, char*, int n);
0284 
0285 
0286 void            readsb(int dev, struct superblock *sb);
0287 int             dirlink(struct inode*, char*, uint);
0288 struct inode*   dirlookup(struct inode*, char*, uint*);
0289 struct inode*   ialloc(uint, short);
0290 struct inode*   idup(struct inode*);
0291 void            iinit(int dev);
0292 void            ilock(struct inode*);
0293 void            iput(struct inode*);
0294 void            iunlock(struct inode*);
0295 void            iunlockput(struct inode*);
0296 void            iupdate(struct inode*);
0297 int             namecmp(const char*, const char*);
0298 struct inode*   namei(char*);
0299 struct inode*   nameiparent(char*, char*);
0300 int             readi(struct inode*, char*, uint, uint);
0301 void            stati(struct inode*, struct stat*);
0302 int             writei(struct inode*, char*, uint, uint);
0303 
0304 
0305 void            ideinit(void);
0306 void            ideintr(void);
0307 void            iderw(struct buf*);
0308 
0309 
0310 void            ioapicenable(int irq, int cpu);
0311 extern uchar    ioapicid;
0312 void            ioapicinit(void);
0313 
0314 
0315 char*           kalloc(void);
0316 void            kfree(char*);
0317 void            kinit1(void*, void*);
0318 void            kinit2(void*, void*);
0319 
0320 
0321 void            kbdintr(void);
0322 
0323 
0324 void            cmostime(struct rtcdate *r);
0325 int             cpunum(void);
0326 extern volatile uint*    lapic;
0327 void            lapiceoi(void);
0328 void            lapicinit(void);
0329 void            lapicstartap(uchar, uint);
0330 void            microdelay(int);
0331 
0332 
0333 void            initlog(int dev);
0334 void            log_write(struct buf*);
0335 void            begin_op();
0336 void            end_op();
0337 
0338 
0339 extern int      ismp;
0340 void            mpinit(void);
0341 
0342 
0343 void            picenable(int);
0344 void            picinit(void);
0345 
0346 
0347 
0348 
0349 
0350 
0351 int             pipealloc(struct file**, struct file**);
0352 void            pipeclose(struct pipe*, int);
0353 int             piperead(struct pipe*, char*, int);
0354 int             pipewrite(struct pipe*, char*, int);
0355 
0356 
0357 
0358 void            exit(void);
0359 int             fork(void);
0360 int             growproc(int);
0361 int             kill(int);
0362 void            pinit(void);
0363 void            procdump(void);
0364 void            scheduler(void) __attribute__((noreturn));
0365 void            sched(void);
0366 void            sleep(void*, struct spinlock*);
0367 void            userinit(void);
0368 int             wait(void);
0369 void            wakeup(void*);
0370 void            yield(void);
0371 
0372 
0373 void            swtch(struct context**, struct context*);
0374 
0375 
0376 void            acquire(struct spinlock*);
0377 void            getcallerpcs(void*, uint*);
0378 int             holding(struct spinlock*);
0379 void            initlock(struct spinlock*, char*);
0380 void            release(struct spinlock*);
0381 void            pushcli(void);
0382 void            popcli(void);
0383 
0384 
0385 int             memcmp(const void*, const void*, uint);
0386 void*           memmove(void*, const void*, uint);
0387 void*           memset(void*, int, uint);
0388 char*           safestrcpy(char*, const char*, int);
0389 int             strlen(const char*);
0390 int             strncmp(const char*, const char*, uint);
0391 char*           strncpy(char*, const char*, int);
0392 
0393 
0394 int             argint(int, int*);
0395 int             argptr(int, char**, int);
0396 int             argstr(int, char**);
0397 int             fetchint(uint, int*);
0398 int             fetchstr(uint, char**);
0399 void            syscall(void);
0400 
0401 void            timerinit(void);
0402 
0403 
0404 void            idtinit(void);
0405 extern uint     ticks;
0406 void            tvinit(void);
0407 extern struct spinlock tickslock;
0408 
0409 
0410 void            uartinit(void);
0411 void            uartintr(void);
0412 void            uartputc(int);
0413 
0414 
0415 void            seginit(void);
0416 void            kvmalloc(void);
0417 pde_t*          setupkvm(void);
0418 char*           uva2ka(pde_t*, char*);
0419 int             allocuvm(pde_t*, uint, uint);
0420 int             deallocuvm(pde_t*, uint, uint);
0421 void            freevm(pde_t*);
0422 void            inituvm(pde_t*, char*, uint);
0423 int             loaduvm(pde_t*, char*, struct inode*, uint, uint);
0424 pde_t*          copyuvm(pde_t*, uint);
0425 void            switchuvm(struct proc*);
0426 void            switchkvm(void);
0427 int             copyout(pde_t*, uint, void*, uint);
0428 void            clearpteu(pde_t *pgdir, char *uva);
0429 
0430 
0431 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
0432 
0433 
0434 
0435 
0436 
0437 
0438 
0439 
0440 
0441 
0442 
0443 
0444 
0445 
0446 
0447 
0448 
0449 
0450 
0451 
0452 static inline uchar
0453 inb(ushort port)
0454 {
0455   uchar data;
0456 
0457   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
0458   return data;
0459 }
0460 
0461 static inline void
0462 insl(int port, void *addr, int cnt)
0463 {
0464   asm volatile("cld; rep insl" :
0465                "=D" (addr), "=c" (cnt) :
0466                "d" (port), "0" (addr), "1" (cnt) :
0467                "memory", "cc");
0468 }
0469 
0470 static inline void
0471 outb(ushort port, uchar data)
0472 {
0473   asm volatile("out %0,%1" : : "a" (data), "d" (port));
0474 }
0475 
0476 static inline void
0477 outw(ushort port, ushort data)
0478 {
0479   asm volatile("out %0,%1" : : "a" (data), "d" (port));
0480 }
0481 
0482 static inline void
0483 outsl(int port, const void *addr, int cnt)
0484 {
0485   asm volatile("cld; rep outsl" :
0486                "=S" (addr), "=c" (cnt) :
0487                "d" (port), "0" (addr), "1" (cnt) :
0488                "cc");
0489 }
0490 
0491 static inline void
0492 stosb(void *addr, int data, int cnt)
0493 {
0494   asm volatile("cld; rep stosb" :
0495                "=D" (addr), "=c" (cnt) :
0496                "0" (addr), "1" (cnt), "a" (data) :
0497                "memory", "cc");
0498 }
0499 
0500 static inline void
0501 stosl(void *addr, int data, int cnt)
0502 {
0503   asm volatile("cld; rep stosl" :
0504                "=D" (addr), "=c" (cnt) :
0505                "0" (addr), "1" (cnt), "a" (data) :
0506                "memory", "cc");
0507 }
0508 
0509 struct segdesc;
0510 
0511 static inline void
0512 lgdt(struct segdesc *p, int size)
0513 {
0514   volatile ushort pd[3];
0515 
0516   pd[0] = size-1;
0517   pd[1] = (uint)p;
0518   pd[2] = (uint)p >> 16;
0519 
0520   asm volatile("lgdt (%0)" : : "r" (pd));
0521 }
0522 
0523 struct gatedesc;
0524 
0525 static inline void
0526 lidt(struct gatedesc *p, int size)
0527 {
0528   volatile ushort pd[3];
0529 
0530   pd[0] = size-1;
0531   pd[1] = (uint)p;
0532   pd[2] = (uint)p >> 16;
0533 
0534   asm volatile("lidt (%0)" : : "r" (pd));
0535 }
0536 
0537 static inline void
0538 ltr(ushort sel)
0539 {
0540   asm volatile("ltr %0" : : "r" (sel));
0541 }
0542 
0543 static inline uint
0544 readeflags(void)
0545 {
0546   uint eflags;
0547   asm volatile("pushfl; popl %0" : "=r" (eflags));
0548   return eflags;
0549 }
0550 static inline void
0551 loadgs(ushort v)
0552 {
0553   asm volatile("movw %0, %%gs" : : "r" (v));
0554 }
0555 
0556 static inline void
0557 cli(void)
0558 {
0559   asm volatile("cli");
0560 }
0561 
0562 static inline void
0563 sti(void)
0564 {
0565   asm volatile("sti");
0566 }
0567 
0568 static inline uint
0569 xchg(volatile uint *addr, uint newval)
0570 {
0571   uint result;
0572 
0573   
0574   asm volatile("lock; xchgl %0, %1" :
0575                "+m" (*addr), "=a" (result) :
0576                "1" (newval) :
0577                "cc");
0578   return result;
0579 }
0580 
0581 static inline uint
0582 rcr2(void)
0583 {
0584   uint val;
0585   asm volatile("movl %%cr2,%0" : "=r" (val));
0586   return val;
0587 }
0588 
0589 static inline void
0590 lcr3(uint val)
0591 {
0592   asm volatile("movl %0,%%cr3" : : "r" (val));
0593 }
0594 
0595 
0596 
0597 
0598 
0599 
0600 
0601 
0602 struct trapframe {
0603   
0604   uint edi;
0605   uint esi;
0606   uint ebp;
0607   uint oesp;      
0608   uint ebx;
0609   uint edx;
0610   uint ecx;
0611   uint eax;
0612 
0613   
0614   ushort gs;
0615   ushort padding1;
0616   ushort fs;
0617   ushort padding2;
0618   ushort es;
0619   ushort padding3;
0620   ushort ds;
0621   ushort padding4;
0622   uint trapno;
0623 
0624   
0625   uint err;
0626   uint eip;
0627   ushort cs;
0628   ushort padding5;
0629   uint eflags;
0630 
0631   
0632   uint esp;
0633   ushort ss;
0634   ushort padding6;
0635 };
0636 
0637 
0638 
0639 
0640 
0641 
0642 
0643 
0644 
0645 
0646 
0647 
0648 
0649 
0650 
0651 
0652 
0653 
0654 #define SEG_NULLASM                                             \
0655         .word 0, 0;                                             \
0656         .byte 0, 0, 0, 0
0657 
0658 
0659 
0660 #define SEG_ASM(type,base,lim)                                  \
0661         .word (((lim) >> 12) & 0xffff), ((base) & 0xffff);      \
0662         .byte (((base) >> 16) & 0xff), (0x90 | (type)),         \
0663                 (0xC0 | (((lim) >> 28) & 0xf)), (((base) >> 24) & 0xff)
0664 
0665 #define STA_X     0x8       
0666 #define STA_E     0x4       
0667 #define STA_C     0x4       
0668 #define STA_W     0x2       
0669 #define STA_R     0x2       
0670 #define STA_A     0x1       
0671 
0672 
0673 
0674 
0675 
0676 
0677 
0678 
0679 
0680 
0681 
0682 
0683 
0684 
0685 
0686 
0687 
0688 
0689 
0690 
0691 
0692 
0693 
0694 
0695 
0696 
0697 
0698 
0699 
0700 
0701 
0702 
0703 
0704 #define FL_CF           0x00000001      
0705 #define FL_PF           0x00000004      
0706 #define FL_AF           0x00000010      
0707 #define FL_ZF           0x00000040      
0708 #define FL_SF           0x00000080      
0709 #define FL_TF           0x00000100      
0710 #define FL_IF           0x00000200      
0711 #define FL_DF           0x00000400      
0712 #define FL_OF           0x00000800      
0713 #define FL_IOPL_MASK    0x00003000      
0714 #define FL_IOPL_0       0x00000000      
0715 #define FL_IOPL_1       0x00001000      
0716 #define FL_IOPL_2       0x00002000      
0717 #define FL_IOPL_3       0x00003000      
0718 #define FL_NT           0x00004000      
0719 #define FL_RF           0x00010000      
0720 #define FL_VM           0x00020000      
0721 #define FL_AC           0x00040000      
0722 #define FL_VIF          0x00080000      
0723 #define FL_VIP          0x00100000      
0724 #define FL_ID           0x00200000      
0725 
0726 
0727 #define CR0_PE          0x00000001      
0728 #define CR0_MP          0x00000002      
0729 #define CR0_EM          0x00000004      
0730 #define CR0_TS          0x00000008      
0731 #define CR0_ET          0x00000010      
0732 #define CR0_NE          0x00000020      
0733 #define CR0_WP          0x00010000      
0734 #define CR0_AM          0x00040000      
0735 #define CR0_NW          0x20000000      
0736 #define CR0_CD          0x40000000      
0737 #define CR0_PG          0x80000000      
0738 
0739 #define CR4_PSE         0x00000010      
0740 
0741 
0742 #define SEG_KCODE 1  
0743 #define SEG_KDATA 2  
0744 #define SEG_KCPU  3  
0745 #define SEG_UCODE 4  
0746 #define SEG_UDATA 5  
0747 #define SEG_TSS   6  
0748 
0749 
0750 
0751 #define NSEGS     7
0752 
0753 
0754 
0755 
0756 
0757 
0758 
0759 
0760 
0761 
0762 
0763 
0764 
0765 
0766 
0767 
0768 
0769 
0770 
0771 
0772 
0773 
0774 
0775 
0776 
0777 
0778 
0779 
0780 
0781 
0782 
0783 
0784 
0785 
0786 
0787 
0788 
0789 
0790 
0791 
0792 
0793 
0794 
0795 
0796 
0797 
0798 
0799 
0800 #ifndef __ASSEMBLER__
0801 
0802 struct segdesc {
0803   uint lim_15_0 : 16;  
0804   uint base_15_0 : 16; 
0805   uint base_23_16 : 8; 
0806   uint type : 4;       
0807   uint s : 1;          
0808   uint dpl : 2;        
0809   uint p : 1;          
0810   uint lim_19_16 : 4;  
0811   uint avl : 1;        
0812   uint rsv1 : 1;       
0813   uint db : 1;         
0814   uint g : 1;          
0815   uint base_31_24 : 8; 
0816 };
0817 
0818 
0819 #define SEG(type, base, lim, dpl) (struct segdesc)    \
0820 { ((lim) >> 12) & 0xffff, (uint)(base) & 0xffff,      \
0821   ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
0822   (uint)(lim) >> 28, 0, 0, 1, 1, (uint)(base) >> 24 }
0823 #define SEG16(type, base, lim, dpl) (struct segdesc)  \
0824 { (lim) & 0xffff, (uint)(base) & 0xffff,              \
0825   ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
0826   (uint)(lim) >> 16, 0, 0, 1, 0, (uint)(base) >> 24 }
0827 #endif
0828 
0829 #define DPL_USER    0x3     
0830 
0831 
0832 #define STA_X       0x8     
0833 #define STA_E       0x4     
0834 #define STA_C       0x4     
0835 #define STA_W       0x2     
0836 #define STA_R       0x2     
0837 #define STA_A       0x1     
0838 
0839 
0840 #define STS_T16A    0x1     
0841 #define STS_LDT     0x2     
0842 #define STS_T16B    0x3     
0843 #define STS_CG16    0x4     
0844 #define STS_TG      0x5     
0845 #define STS_IG16    0x6     
0846 #define STS_TG16    0x7     
0847 #define STS_T32A    0x9     
0848 #define STS_T32B    0xB     
0849 #define STS_CG32    0xC     
0850 #define STS_IG32    0xE     
0851 #define STS_TG32    0xF     
0852 
0853 
0854 
0855 
0856 
0857 
0858 
0859 
0860 
0861 
0862 #define PDX(va)         (((uint)(va) >> PDXSHIFT) & 0x3FF)
0863 
0864 
0865 #define PTX(va)         (((uint)(va) >> PTXSHIFT) & 0x3FF)
0866 
0867 
0868 #define PGADDR(d, t, o) ((uint)((d) << PDXSHIFT | (t) << PTXSHIFT | (o)))
0869 
0870 
0871 #define NPDENTRIES      1024    
0872 #define NPTENTRIES      1024    
0873 #define PGSIZE          4096    
0874 
0875 #define PGSHIFT         12      
0876 #define PTXSHIFT        12      
0877 #define PDXSHIFT        22      
0878 
0879 #define PGROUNDUP(sz)  (((sz)+PGSIZE-1) & ~(PGSIZE-1))
0880 #define PGROUNDDOWN(a) (((a)) & ~(PGSIZE-1))
0881 
0882 
0883 #define PTE_P           0x001   
0884 #define PTE_W           0x002   
0885 #define PTE_U           0x004   
0886 #define PTE_PWT         0x008   
0887 #define PTE_PCD         0x010   
0888 #define PTE_A           0x020   
0889 #define PTE_D           0x040   
0890 #define PTE_PS          0x080   
0891 #define PTE_MBZ         0x180   
0892 
0893 
0894 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
0895 #define PTE_FLAGS(pte)  ((uint)(pte) &  0xFFF)
0896 
0897 #ifndef __ASSEMBLER__
0898 typedef uint pte_t;
0899 
0900 
0901 struct taskstate {
0902   uint link;         
0903   uint esp0;         
0904   ushort ss0;        
0905   ushort padding1;
0906   uint *esp1;
0907   ushort ss1;
0908   ushort padding2;
0909   uint *esp2;
0910   ushort ss2;
0911   ushort padding3;
0912   void *cr3;         
0913   uint *eip;         
0914   uint eflags;
0915   uint eax;          
0916   uint ecx;
0917   uint edx;
0918   uint ebx;
0919   uint *esp;
0920   uint *ebp;
0921   uint esi;
0922   uint edi;
0923   ushort es;         
0924   ushort padding4;
0925   ushort cs;
0926   ushort padding5;
0927   ushort ss;
0928   ushort padding6;
0929   ushort ds;
0930   ushort padding7;
0931   ushort fs;
0932   ushort padding8;
0933   ushort gs;
0934   ushort padding9;
0935   ushort ldt;
0936   ushort padding10;
0937   ushort t;          
0938   ushort iomb;       
0939 };
0940 
0941 
0942 
0943 
0944 
0945 
0946 
0947 
0948 
0949 
0950 
0951 struct gatedesc {
0952   uint off_15_0 : 16;   
0953   uint cs : 16;         
0954   uint args : 5;        
0955   uint rsv1 : 3;        
0956   uint type : 4;        
0957   uint s : 1;           
0958   uint dpl : 2;         
0959   uint p : 1;           
0960   uint off_31_16 : 16;  
0961 };
0962 
0963 
0964 
0965 
0966 
0967 
0968 
0969 
0970 
0971 #define SETGATE(gate, istrap, sel, off, d)                \
0972 {                                                         \
0973   (gate).off_15_0 = (uint)(off) & 0xffff;                \
0974   (gate).cs = (sel);                                      \
0975   (gate).args = 0;                                        \
0976   (gate).rsv1 = 0;                                        \
0977   (gate).type = (istrap) ? STS_TG32 : STS_IG32;           \
0978   (gate).s = 0;                                           \
0979   (gate).dpl = (d);                                       \
0980   (gate).p = 1;                                           \
0981   (gate).off_31_16 = (uint)(off) >> 16;                  \
0982 }
0983 
0984 #endif
0985 
0986 
0987 
0988 
0989 
0990 
0991 
0992 
0993 
0994 
0995 
0996 
0997 
0998 
0999 
1000 
1001 
1002 #define ELF_MAGIC 0x464C457FU  
1003 
1004 
1005 struct elfhdr {
1006   uint magic;  
1007   uchar elf[12];
1008   ushort type;
1009   ushort machine;
1010   uint version;
1011   uint entry;
1012   uint phoff;
1013   uint shoff;
1014   uint flags;
1015   ushort ehsize;
1016   ushort phentsize;
1017   ushort phnum;
1018   ushort shentsize;
1019   ushort shnum;
1020   ushort shstrndx;
1021 };
1022 
1023 
1024 struct proghdr {
1025   uint type;
1026   uint off;
1027   uint vaddr;
1028   uint paddr;
1029   uint filesz;
1030   uint memsz;
1031   uint flags;
1032   uint align;
1033 };
1034 
1035 
1036 #define ELF_PROG_LOAD           1
1037 
1038 
1039 #define ELF_PROG_FLAG_EXEC      1
1040 #define ELF_PROG_FLAG_WRITE     2
1041 #define ELF_PROG_FLAG_READ      4
1042 
1043 
1044 
1045 
1046 
1047 
1048 
1049 
1050 
1051 
1052 
1053 
1054 
1055 
1056 
1057 
1058 
1059 
1060 
1061 
1062 
1063 
1064 
1065 
1066 
1067 
1068 
1069 
1070 
1071 
1072 
1073 
1074 
1075 
1076 
1077 
1078 
1079 
1080 
1081 
1082 
1083 
1084 
1085 
1086 
1087 
1088 
1089 
1090 
1091 
1092 
1093 
1094 
1095 
1096 
1097 
1098 
1099 
1100 
1101 
1102 
1103 
1104 
1105 
1106 
1107 
1108 
1109 
1110 
1111 
1112 
1113 
1114 
1115 
1116 
1117 
1118 
1119 
1120 
1121 
1122 
1123 
1124 
1125 
1126 .p2align 2
1127 .text
1128 .globl multiboot_header
1129 multiboot_header:
1130   
1131   
1132   .long magic
1133   .long flags
1134   .long (-magic-flags)
1135 
1136 
1137 
1138 
1139 .globl _start
1140 _start = V2P_WO(entry)
1141 
1142 
1143 .globl entry
1144 entry:
1145   
1146   movl    %cr4, %eax
1147   orl     $(CR4_PSE), %eax
1148   movl    %eax, %cr4
1149   
1150   movl    $(V2P_WO(entrypgdir)), %eax
1151   movl    %eax, %cr3
1152   
1153   movl    %cr0, %eax
1154   orl     $(CR0_PG|CR0_WP), %eax
1155   movl    %eax, %cr0
1156 
1157   
1158   movl $(stack + KSTACKSIZE), %esp
1159 
1160   
1161   
1162   
1163   
1164   mov $main, %eax
1165   jmp *%eax
1166 
1167 .comm stack, KSTACKSIZE
1168 
1169 
1170 
1171 
1172 
1173 
1174 
1175 
1176 
1177 
1178 
1179 
1180 
1181 
1182 
1183 
1184 
1185 
1186 
1187 
1188 
1189 
1190 
1191 
1192 
1193 
1194 
1195 
1196 
1197 
1198 
1199 
1200 
1201 
1202 
1203 
1204 
1205 
1206 
1207 
1208 
1209 
1210 
1211 
1212 
1213 
1214 
1215 
1216 
1217 
1218 
1219 
1220 
1221 .code16
1222 .globl start
1223 start:
1224   cli
1225 
1226   
1227   xorw    %ax,%ax
1228   movw    %ax,%ds
1229   movw    %ax,%es
1230   movw    %ax,%ss
1231 
1232   
1233   
1234   
1235   lgdt    gdtdesc
1236   movl    %cr0, %eax
1237   orl     $CR0_PE, %eax
1238   movl    %eax, %cr0
1239 
1240   
1241   
1242   
1243   ljmpl    $(SEG_KCODE<<3), $(start32)
1244 
1245 
1246 
1247 
1248 
1249 
1250 .code32  
1251 start32:
1252   
1253   movw    $(SEG_KDATA<<3), %ax    
1254   movw    %ax, %ds                
1255   movw    %ax, %es                
1256   movw    %ax, %ss                
1257   movw    $0, %ax                 
1258   movw    %ax, %fs                
1259   movw    %ax, %gs                
1260 
1261   
1262   movl    %cr4, %eax
1263   orl     $(CR4_PSE), %eax
1264   movl    %eax, %cr4
1265   
1266   movl    (start-12), %eax
1267   movl    %eax, %cr3
1268   
1269   movl    %cr0, %eax
1270   orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
1271   movl    %eax, %cr0
1272 
1273   
1274   movl    (start-4), %esp
1275   
1276   call	 *(start-8)
1277 
1278   movw    $0x8a00, %ax
1279   movw    %ax, %dx
1280   outw    %ax, %dx
1281   movw    $0x8ae0, %ax
1282   outw    %ax, %dx
1283 spin:
1284   jmp     spin
1285 
1286 .p2align 2
1287 gdt:
1288   SEG_NULLASM
1289   SEG_ASM(STA_X|STA_R, 0, 0xffffffff)
1290   SEG_ASM(STA_W, 0, 0xffffffff)
1291 
1292 
1293 gdtdesc:
1294   .word   (gdtdesc - gdt - 1)
1295   .long   gdt
1296 
1297 
1298 
1299 
1300 #include "types.h"
1301 #include "defs.h"
1302 #include "param.h"
1303 #include "memlayout.h"
1304 #include "mmu.h"
1305 #include "proc.h"
1306 #include "x86.h"
1307 
1308 static void startothers(void);
1309 static void mpmain(void)  __attribute__((noreturn));
1310 extern pde_t *kpgdir;
1311 extern char end[]; 
1312 
1313 
1314 
1315 
1316 int
1317 main(void)
1318 {
1319   kinit1(end, P2V(4*1024*1024)); 
1320   kvmalloc();      
1321   mpinit();        
1322   lapicinit();     
1323   seginit();       
1324   cprintf("\ncpu%d: starting xv6\n\n", cpunum());
1325   picinit();       
1326   ioapicinit();    
1327   consoleinit();   
1328   uartinit();      
1329   pinit();         
1330   tvinit();        
1331   binit();         
1332   fileinit();      
1333   ideinit();       
1334   if(!ismp)
1335     timerinit();   
1336   startothers();   
1337   kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); 
1338   userinit();      
1339   mpmain();        
1340 }
1341 
1342 
1343 
1344 
1345 
1346 
1347 
1348 
1349 
1350 
1351 static void
1352 mpenter(void)
1353 {
1354   switchkvm();
1355   seginit();
1356   lapicinit();
1357   mpmain();
1358 }
1359 
1360 
1361 static void
1362 mpmain(void)
1363 {
1364   cprintf("cpu%d: starting\n", cpunum());
1365   idtinit();       
1366   xchg(&cpu->started, 1); 
1367   scheduler();     
1368 }
1369 
1370 pde_t entrypgdir[];  
1371 
1372 
1373 static void
1374 startothers(void)
1375 {
1376   extern uchar _binary_entryother_start[], _binary_entryother_size[];
1377   uchar *code;
1378   struct cpu *c;
1379   char *stack;
1380 
1381   
1382   
1383   
1384   code = P2V(0x7000);
1385   memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
1386 
1387   for(c = cpus; c < cpus+ncpu; c++){
1388     if(c == cpus+cpunum())  
1389       continue;
1390 
1391     
1392     
1393     
1394     stack = kalloc();
1395     *(void**)(code-4) = stack + KSTACKSIZE;
1396     *(void**)(code-8) = mpenter;
1397     *(int**)(code-12) = (void *) V2P(entrypgdir);
1398 
1399     lapicstartap(c->apicid, V2P(code));
1400     
1401     while(c->started == 0)
1402       ;
1403   }
1404 }
1405 
1406 
1407 
1408 
1409 
1410 
1411 __attribute__((__aligned__(PGSIZE)))
1412 pde_t entrypgdir[NPDENTRIES] = {
1413   
1414   [0] = (0) | PTE_P | PTE_W | PTE_PS,
1415   
1416   [KERNBASE>>PDXSHIFT] = (0) | PTE_P | PTE_W | PTE_PS,
1417 };
1418 
1419 
1420 
1421 
1422 
1423 
1424 
1425 
1426 
1427 
1428 
1429 
1430 
1431 
1432 
1433 
1434 
1435 
1436 
1437 
1438 
1439 
1440 
1441 
1442 
1443 
1444 
1445 
1446 
1447 
1448 
1449 
1450 
1451 
1452 
1453 
1454 
1455 
1456 
1457 
1458 
1459 
1460 
1461 
1462 
1463 
1464 
1465 
1466 
1467 
1468 
1469 
1470 
1471 
1472 
1473 
1474 
1475 
1476 
1477 
1478 
1479 
1480 
1481 
1482 
1483 
1484 
1485 
1486 
1487 
1488 
1489 
1490 
1491 
1492 
1493 
1494 
1495 
1496 
1497 
1498 
1499 
1500 
1501 struct spinlock {
1502   uint locked;       
1503 
1504   
1505   char *name;        
1506   struct cpu *cpu;   
1507   uint pcs[10];      
1508                      
1509 };
1510 
1511 
1512 
1513 
1514 
1515 
1516 
1517 
1518 
1519 
1520 
1521 
1522 
1523 
1524 
1525 
1526 
1527 
1528 
1529 
1530 
1531 
1532 
1533 
1534 
1535 
1536 
1537 
1538 
1539 
1540 
1541 
1542 
1543 
1544 
1545 
1546 
1547 
1548 
1549 
1550 
1551 
1552 #include "types.h"
1553 #include "defs.h"
1554 #include "param.h"
1555 #include "x86.h"
1556 #include "memlayout.h"
1557 #include "mmu.h"
1558 #include "proc.h"
1559 #include "spinlock.h"
1560 
1561 void
1562 initlock(struct spinlock *lk, char *name)
1563 {
1564   lk->name = name;
1565   lk->locked = 0;
1566   lk->cpu = 0;
1567 }
1568 
1569 
1570 
1571 
1572 
1573 void
1574 acquire(struct spinlock *lk)
1575 {
1576   pushcli(); 
1577   if(holding(lk))
1578     panic("acquire");
1579 
1580   
1581   while(xchg(&lk->locked, 1) != 0)
1582     ;
1583 
1584   
1585   
1586   
1587   __sync_synchronize();
1588 
1589   
1590   lk->cpu = cpu;
1591   getcallerpcs(&lk, lk->pcs);
1592 }
1593 
1594 
1595 
1596 
1597 
1598 
1599 
1600 
1601 void
1602 release(struct spinlock *lk)
1603 {
1604   if(!holding(lk))
1605     panic("release");
1606 
1607   lk->pcs[0] = 0;
1608   lk->cpu = 0;
1609 
1610   
1611   
1612   
1613   
1614   
1615   __sync_synchronize();
1616 
1617   
1618   
1619   
1620   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
1621 
1622   popcli();
1623 }
1624 
1625 
1626 void
1627 getcallerpcs(void *v, uint pcs[])
1628 {
1629   uint *ebp;
1630   int i;
1631 
1632   ebp = (uint*)v - 2;
1633   for(i = 0; i < 10; i++){
1634     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
1635       break;
1636     pcs[i] = ebp[1];     
1637     ebp = (uint*)ebp[0]; 
1638   }
1639   for(; i < 10; i++)
1640     pcs[i] = 0;
1641 }
1642 
1643 
1644 int
1645 holding(struct spinlock *lock)
1646 {
1647   return lock->locked && lock->cpu == cpu;
1648 }
1649 
1650 
1651 
1652 
1653 
1654 void
1655 pushcli(void)
1656 {
1657   int eflags;
1658 
1659   eflags = readeflags();
1660   cli();
1661   if(cpu->ncli == 0)
1662     cpu->intena = eflags & FL_IF;
1663   cpu->ncli += 1;
1664 }
1665 
1666 void
1667 popcli(void)
1668 {
1669   if(readeflags()&FL_IF)
1670     panic("popcli - interruptible");
1671   if(--cpu->ncli < 0)
1672     panic("popcli");
1673   if(cpu->ncli == 0 && cpu->intena)
1674     sti();
1675 }
1676 
1677 
1678 
1679 
1680 
1681 
1682 
1683 
1684 
1685 
1686 
1687 
1688 
1689 
1690 
1691 
1692 
1693 
1694 
1695 
1696 
1697 
1698 
1699 
1700 #include "param.h"
1701 #include "types.h"
1702 #include "defs.h"
1703 #include "x86.h"
1704 #include "memlayout.h"
1705 #include "mmu.h"
1706 #include "proc.h"
1707 #include "elf.h"
1708 
1709 extern char data[];  
1710 pde_t *kpgdir;  
1711 
1712 
1713 
1714 void
1715 seginit(void)
1716 {
1717   struct cpu *c;
1718 
1719   
1720   
1721   
1722   
1723   c = &cpus[cpunum()];
1724   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
1725   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
1726   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
1727   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
1728 
1729   
1730   c->gdt[SEG_KCPU] = SEG(STA_W, &c->cpu, 8, 0);
1731 
1732   lgdt(c->gdt, sizeof(c->gdt));
1733   loadgs(SEG_KCPU << 3);
1734 
1735   
1736   cpu = c;
1737   proc = 0;
1738 }
1739 
1740 
1741 
1742 
1743 
1744 
1745 
1746 
1747 
1748 
1749 
1750 
1751 
1752 
1753 static pte_t *
1754 walkpgdir(pde_t *pgdir, const void *va, int alloc)
1755 {
1756   pde_t *pde;
1757   pte_t *pgtab;
1758 
1759   pde = &pgdir[PDX(va)];
1760   if(*pde & PTE_P){
1761     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
1762   } else {
1763     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
1764       return 0;
1765     
1766     memset(pgtab, 0, PGSIZE);
1767     
1768     
1769     
1770     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
1771   }
1772   return &pgtab[PTX(va)];
1773 }
1774 
1775 
1776 
1777 
1778 static int
1779 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
1780 {
1781   char *a, *last;
1782   pte_t *pte;
1783 
1784   a = (char*)PGROUNDDOWN((uint)va);
1785   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
1786   for(;;){
1787     if((pte = walkpgdir(pgdir, a, 1)) == 0)
1788       return -1;
1789     if(*pte & PTE_P)
1790       panic("remap");
1791     *pte = pa | perm | PTE_P;
1792     if(a == last)
1793       break;
1794     a += PGSIZE;
1795     pa += PGSIZE;
1796   }
1797   return 0;
1798 }
1799 
1800 
1801 
1802 
1803 
1804 
1805 
1806 
1807 
1808 
1809 
1810 
1811 
1812 
1813 
1814 
1815 
1816 
1817 
1818 
1819 
1820 
1821 
1822 
1823 static struct kmap {
1824   void *virt;
1825   uint phys_start;
1826   uint phys_end;
1827   int perm;
1828 } kmap[] = {
1829  { (void*)KERNBASE, 0,             EXTMEM,    PTE_W}, 
1830  { (void*)KERNLINK, V2P(KERNLINK), V2P(data), 0},     
1831  { (void*)data,     V2P(data),     PHYSTOP,   PTE_W}, 
1832  { (void*)DEVSPACE, DEVSPACE,      0,         PTE_W}, 
1833 };
1834 
1835 
1836 pde_t*
1837 setupkvm(void)
1838 {
1839   pde_t *pgdir;
1840   struct kmap *k;
1841 
1842   if((pgdir = (pde_t*)kalloc()) == 0)
1843     return 0;
1844   memset(pgdir, 0, PGSIZE);
1845   if (P2V(PHYSTOP) > (void*)DEVSPACE)
1846     panic("PHYSTOP too high");
1847   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
1848     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
1849                 (uint)k->phys_start, k->perm) < 0)
1850       return 0;
1851   return pgdir;
1852 }
1853 
1854 
1855 
1856 void
1857 kvmalloc(void)
1858 {
1859   kpgdir = setupkvm();
1860   switchkvm();
1861 }
1862 
1863 
1864 
1865 void
1866 switchkvm(void)
1867 {
1868   lcr3(V2P(kpgdir));   
1869 }
1870 
1871 
1872 void
1873 switchuvm(struct proc *p)
1874 {
1875   pushcli();
1876   cpu->gdt[SEG_TSS] = SEG16(STS_T32A, &cpu->ts, sizeof(cpu->ts)-1, 0);
1877   cpu->gdt[SEG_TSS].s = 0;
1878   cpu->ts.ss0 = SEG_KDATA << 3;
1879   cpu->ts.esp0 = (uint)proc->kstack + KSTACKSIZE;
1880   
1881   
1882   cpu->ts.iomb = (ushort) 0xFFFF;
1883   ltr(SEG_TSS << 3);
1884   if(p->pgdir == 0)
1885     panic("switchuvm: no pgdir");
1886   lcr3(V2P(p->pgdir));  
1887   popcli();
1888 }
1889 
1890 
1891 
1892 
1893 
1894 
1895 
1896 
1897 
1898 
1899 
1900 
1901 
1902 void
1903 inituvm(pde_t *pgdir, char *init, uint sz)
1904 {
1905   char *mem;
1906 
1907   if(sz >= PGSIZE)
1908     panic("inituvm: more than a page");
1909   mem = kalloc();
1910   memset(mem, 0, PGSIZE);
1911   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
1912   memmove(mem, init, sz);
1913 }
1914 
1915 
1916 
1917 int
1918 loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
1919 {
1920   uint i, pa, n;
1921   pte_t *pte;
1922 
1923   if((uint) addr % PGSIZE != 0)
1924     panic("loaduvm: addr must be page aligned");
1925   for(i = 0; i < sz; i += PGSIZE){
1926     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
1927       panic("loaduvm: address should exist");
1928     pa = PTE_ADDR(*pte);
1929     if(sz - i < PGSIZE)
1930       n = sz - i;
1931     else
1932       n = PGSIZE;
1933     if(readi(ip, P2V(pa), offset+i, n) != n)
1934       return -1;
1935   }
1936   return 0;
1937 }
1938 
1939 
1940 
1941 
1942 
1943 
1944 
1945 
1946 
1947 
1948 
1949 
1950 
1951 
1952 int
1953 allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
1954 {
1955   char *mem;
1956   uint a;
1957 
1958   if(newsz >= KERNBASE)
1959     return 0;
1960   if(newsz < oldsz)
1961     return oldsz;
1962 
1963   a = PGROUNDUP(oldsz);
1964   for(; a < newsz; a += PGSIZE){
1965     mem = kalloc();
1966     if(mem == 0){
1967       cprintf("allocuvm out of memory\n");
1968       deallocuvm(pgdir, newsz, oldsz);
1969       return 0;
1970     }
1971     memset(mem, 0, PGSIZE);
1972     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
1973       cprintf("allocuvm out of memory (2)\n");
1974       deallocuvm(pgdir, newsz, oldsz);
1975       kfree(mem);
1976       return 0;
1977     }
1978   }
1979   return newsz;
1980 }
1981 
1982 
1983 
1984 
1985 
1986 int
1987 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
1988 {
1989   pte_t *pte;
1990   uint a, pa;
1991 
1992   if(newsz >= oldsz)
1993     return oldsz;
1994 
1995   a = PGROUNDUP(newsz);
1996   for(; a  < oldsz; a += PGSIZE){
1997     pte = walkpgdir(pgdir, (char*)a, 0);
1998     if(!pte)
1999       a += (NPTENTRIES - 1) * PGSIZE;
2000     else if((*pte & PTE_P) != 0){
2001       pa = PTE_ADDR(*pte);
2002       if(pa == 0)
2003         panic("kfree");
2004       char *v = P2V(pa);
2005       kfree(v);
2006       *pte = 0;
2007     }
2008   }
2009   return newsz;
2010 }
2011 
2012 
2013 
2014 void
2015 freevm(pde_t *pgdir)
2016 {
2017   uint i;
2018 
2019   if(pgdir == 0)
2020     panic("freevm: no pgdir");
2021   deallocuvm(pgdir, KERNBASE, 0);
2022   for(i = 0; i < NPDENTRIES; i++){
2023     if(pgdir[i] & PTE_P){
2024       char * v = P2V(PTE_ADDR(pgdir[i]));
2025       kfree(v);
2026     }
2027   }
2028   kfree((char*)pgdir);
2029 }
2030 
2031 
2032 
2033 void
2034 clearpteu(pde_t *pgdir, char *uva)
2035 {
2036   pte_t *pte;
2037 
2038   pte = walkpgdir(pgdir, uva, 0);
2039   if(pte == 0)
2040     panic("clearpteu");
2041   *pte &= ~PTE_U;
2042 }
2043 
2044 
2045 
2046 
2047 
2048 
2049 
2050 
2051 
2052 pde_t*
2053 copyuvm(pde_t *pgdir, uint sz)
2054 {
2055   pde_t *d;
2056   pte_t *pte;
2057   uint pa, i, flags;
2058   char *mem;
2059 
2060   if((d = setupkvm()) == 0)
2061     return 0;
2062   for(i = 0; i < sz; i += PGSIZE){
2063     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
2064       panic("copyuvm: pte should exist");
2065     if(!(*pte & PTE_P))
2066       panic("copyuvm: page not present");
2067     pa = PTE_ADDR(*pte);
2068     flags = PTE_FLAGS(*pte);
2069     if((mem = kalloc()) == 0)
2070       goto bad;
2071     memmove(mem, (char*)P2V(pa), PGSIZE);
2072     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0)
2073       goto bad;
2074   }
2075   return d;
2076 
2077 bad:
2078   freevm(d);
2079   return 0;
2080 }
2081 
2082 
2083 
2084 
2085 
2086 
2087 
2088 
2089 
2090 
2091 
2092 
2093 
2094 
2095 
2096 
2097 
2098 
2099 
2100 
2101 char*
2102 uva2ka(pde_t *pgdir, char *uva)
2103 {
2104   pte_t *pte;
2105 
2106   pte = walkpgdir(pgdir, uva, 0);
2107   if((*pte & PTE_P) == 0)
2108     return 0;
2109   if((*pte & PTE_U) == 0)
2110     return 0;
2111   return (char*)P2V(PTE_ADDR(*pte));
2112 }
2113 
2114 
2115 
2116 
2117 int
2118 copyout(pde_t *pgdir, uint va, void *p, uint len)
2119 {
2120   char *buf, *pa0;
2121   uint n, va0;
2122 
2123   buf = (char*)p;
2124   while(len > 0){
2125     va0 = (uint)PGROUNDDOWN(va);
2126     pa0 = uva2ka(pgdir, (char*)va0);
2127     if(pa0 == 0)
2128       return -1;
2129     n = PGSIZE - (va - va0);
2130     if(n > len)
2131       n = len;
2132     memmove(pa0 + (va - va0), buf, n);
2133     len -= n;
2134     buf += n;
2135     va = va0 + PGSIZE;
2136   }
2137   return 0;
2138 }
2139 
2140 
2141 
2142 
2143 
2144 
2145 
2146 
2147 
2148 
2149 
2150 
2151 
2152 
2153 
2154 
2155 
2156 
2157 
2158 
2159 
2160 
2161 
2162 
2163 
2164 
2165 
2166 
2167 
2168 
2169 
2170 
2171 
2172 
2173 
2174 
2175 
2176 
2177 
2178 
2179 
2180 
2181 
2182 
2183 
2184 
2185 
2186 
2187 
2188 
2189 
2190 
2191 
2192 
2193 
2194 
2195 
2196 
2197 
2198 
2199 
2200 
2201 
2202 
2203 
2204 
2205 
2206 
2207 
2208 
2209 
2210 
2211 
2212 
2213 
2214 
2215 
2216 
2217 
2218 
2219 
2220 
2221 
2222 
2223 
2224 
2225 
2226 
2227 
2228 
2229 
2230 
2231 
2232 
2233 
2234 
2235 
2236 
2237 
2238 
2239 
2240 
2241 
2242 
2243 
2244 
2245 
2246 
2247 
2248 
2249 
2250 
2251 
2252 
2253 
2254 
2255 
2256 
2257 
2258 
2259 
2260 
2261 
2262 
2263 
2264 
2265 
2266 
2267 
2268 
2269 
2270 
2271 
2272 
2273 
2274 
2275 
2276 
2277 
2278 
2279 
2280 
2281 
2282 
2283 
2284 
2285 
2286 
2287 
2288 
2289 
2290 
2291 
2292 
2293 
2294 
2295 
2296 
2297 
2298 
2299 
2300 
2301 struct cpu {
2302   uchar apicid;                
2303   struct context *scheduler;   
2304   struct taskstate ts;         
2305   struct segdesc gdt[NSEGS];   
2306   volatile uint started;       
2307   int ncli;                    
2308   int intena;                  
2309 
2310   
2311   struct cpu *cpu;
2312   struct proc *proc;           
2313 };
2314 
2315 extern struct cpu cpus[NCPU];
2316 extern int ncpu;
2317 
2318 
2319 
2320 
2321 
2322 
2323 
2324 
2325 
2326 extern struct cpu *cpu asm("%gs:0");       
2327 extern struct proc *proc asm("%gs:4");     
2328 
2329 
2330 
2331 
2332 
2333 
2334 
2335 
2336 
2337 
2338 
2339 
2340 struct context {
2341   uint edi;
2342   uint esi;
2343   uint ebx;
2344   uint ebp;
2345   uint eip;
2346 };
2347 
2348 
2349 
2350 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
2351 
2352 
2353 struct proc {
2354   uint sz;                     
2355   pde_t* pgdir;                
2356   char *kstack;                
2357   enum procstate state;        
2358   int pid;                     
2359   struct proc *parent;         
2360   struct trapframe *tf;        
2361   struct context *context;     
2362   void *chan;                  
2363   int killed;                  
2364   struct file *ofile[NOFILE];  
2365   struct inode *cwd;           
2366   char name[16];               
2367 };
2368 
2369 
2370 
2371 
2372 
2373 
2374 
2375 
2376 
2377 
2378 
2379 
2380 
2381 
2382 
2383 
2384 
2385 
2386 
2387 
2388 
2389 
2390 
2391 
2392 
2393 
2394 
2395 
2396 
2397 
2398 
2399 
2400 #include "types.h"
2401 #include "defs.h"
2402 #include "param.h"
2403 #include "memlayout.h"
2404 #include "mmu.h"
2405 #include "x86.h"
2406 #include "proc.h"
2407 #include "spinlock.h"
2408 
2409 struct {
2410   struct spinlock lock;
2411   struct proc proc[NPROC];
2412 } ptable;
2413 
2414 static struct proc *initproc;
2415 
2416 int nextpid = 1;
2417 extern void forkret(void);
2418 extern void trapret(void);
2419 
2420 static void wakeup1(void *chan);
2421 
2422 void
2423 pinit(void)
2424 {
2425   initlock(&ptable.lock, "ptable");
2426 }
2427 
2428 
2429 
2430 
2431 
2432 
2433 
2434 
2435 
2436 
2437 
2438 
2439 
2440 
2441 
2442 
2443 
2444 
2445 
2446 
2447 
2448 
2449 
2450 
2451 
2452 
2453 
2454 
2455 static struct proc*
2456 allocproc(void)
2457 {
2458   struct proc *p;
2459   char *sp;
2460 
2461   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
2462     if(p->state == UNUSED)
2463       goto found;
2464   return 0;
2465 
2466 found:
2467   p->state = EMBRYO;
2468   p->pid = nextpid++;
2469 
2470   
2471   if((p->kstack = kalloc()) == 0){
2472     p->state = UNUSED;
2473     return 0;
2474   }
2475   sp = p->kstack + KSTACKSIZE;
2476 
2477   
2478   sp -= sizeof *p->tf;
2479   p->tf = (struct trapframe*)sp;
2480 
2481   
2482   
2483   sp -= 4;
2484   *(uint*)sp = (uint)trapret;
2485 
2486   sp -= sizeof *p->context;
2487   p->context = (struct context*)sp;
2488   memset(p->context, 0, sizeof *p->context);
2489   p->context->eip = (uint)forkret;
2490 
2491   return p;
2492 }
2493 
2494 
2495 
2496 
2497 
2498 
2499 
2500 
2501 void
2502 userinit(void)
2503 {
2504   struct proc *p;
2505   extern char _binary_initcode_start[], _binary_initcode_size[];
2506 
2507   acquire(&ptable.lock);
2508 
2509   p = allocproc();
2510 
2511   
2512   
2513   
2514   release(&ptable.lock);
2515 
2516   initproc = p;
2517   if((p->pgdir = setupkvm()) == 0)
2518     panic("userinit: out of memory?");
2519   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
2520   p->sz = PGSIZE;
2521   memset(p->tf, 0, sizeof(*p->tf));
2522   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
2523   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
2524   p->tf->es = p->tf->ds;
2525   p->tf->ss = p->tf->ds;
2526   p->tf->eflags = FL_IF;
2527   p->tf->esp = PGSIZE;
2528   p->tf->eip = 0;  
2529 
2530   safestrcpy(p->name, "initcode", sizeof(p->name));
2531   p->cwd = namei("/");
2532 
2533   
2534   
2535   
2536   
2537   acquire(&ptable.lock);
2538 
2539   p->state = RUNNABLE;
2540 
2541   release(&ptable.lock);
2542 }
2543 
2544 
2545 
2546 
2547 
2548 
2549 
2550 
2551 
2552 int
2553 growproc(int n)
2554 {
2555   uint sz;
2556 
2557   sz = proc->sz;
2558   if(n > 0){
2559     if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
2560       return -1;
2561   } else if(n < 0){
2562     if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
2563       return -1;
2564   }
2565   proc->sz = sz;
2566   switchuvm(proc);
2567   return 0;
2568 }
2569 
2570 
2571 
2572 
2573 int
2574 fork(void)
2575 {
2576   int i, pid;
2577   struct proc *np;
2578 
2579   acquire(&ptable.lock);
2580 
2581   
2582   if((np = allocproc()) == 0){
2583     release(&ptable.lock);
2584     return -1;
2585   }
2586 
2587   release(&ptable.lock);
2588 
2589   
2590   if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
2591     kfree(np->kstack);
2592     np->kstack = 0;
2593     np->state = UNUSED;
2594     release(&ptable.lock);
2595     return -1;
2596   }
2597   np->sz = proc->sz;
2598   np->parent = proc;
2599   *np->tf = *proc->tf;
2600   
2601   np->tf->eax = 0;
2602 
2603   for(i = 0; i < NOFILE; i++)
2604     if(proc->ofile[i])
2605       np->ofile[i] = filedup(proc->ofile[i]);
2606   np->cwd = idup(proc->cwd);
2607 
2608   safestrcpy(np->name, proc->name, sizeof(proc->name));
2609 
2610   pid = np->pid;
2611 
2612   acquire(&ptable.lock);
2613 
2614   np->state = RUNNABLE;
2615 
2616   release(&ptable.lock);
2617 
2618   return pid;
2619 }
2620 
2621 
2622 
2623 
2624 void
2625 exit(void)
2626 {
2627   struct proc *p;
2628   int fd;
2629 
2630   if(proc == initproc)
2631     panic("init exiting");
2632 
2633   
2634   for(fd = 0; fd < NOFILE; fd++){
2635     if(proc->ofile[fd]){
2636       fileclose(proc->ofile[fd]);
2637       proc->ofile[fd] = 0;
2638     }
2639   }
2640 
2641   begin_op();
2642   iput(proc->cwd);
2643   end_op();
2644   proc->cwd = 0;
2645 
2646   acquire(&ptable.lock);
2647 
2648   
2649   wakeup1(proc->parent);
2650   
2651   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2652     if(p->parent == proc){
2653       p->parent = initproc;
2654       if(p->state == ZOMBIE)
2655         wakeup1(initproc);
2656     }
2657   }
2658 
2659   
2660   proc->state = ZOMBIE;
2661   sched();
2662   panic("zombie exit");
2663 }
2664 
2665 
2666 
2667 int
2668 wait(void)
2669 {
2670   struct proc *p;
2671   int havekids, pid;
2672 
2673   acquire(&ptable.lock);
2674   for(;;){
2675     
2676     havekids = 0;
2677     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2678       if(p->parent != proc)
2679         continue;
2680       havekids = 1;
2681       if(p->state == ZOMBIE){
2682         
2683         pid = p->pid;
2684         kfree(p->kstack);
2685         p->kstack = 0;
2686         freevm(p->pgdir);
2687         p->pid = 0;
2688         p->parent = 0;
2689         p->name[0] = 0;
2690         p->killed = 0;
2691         p->state = UNUSED;
2692         release(&ptable.lock);
2693         return pid;
2694       }
2695     }
2696 
2697 
2698 
2699 
2700     
2701     if(!havekids || proc->killed){
2702       release(&ptable.lock);
2703       return -1;
2704     }
2705 
2706     
2707     sleep(proc, &ptable.lock);  
2708   }
2709 }
2710 
2711 
2712 
2713 
2714 
2715 
2716 
2717 
2718 
2719 
2720 
2721 
2722 
2723 
2724 
2725 
2726 
2727 
2728 
2729 
2730 
2731 
2732 
2733 
2734 
2735 
2736 
2737 
2738 
2739 
2740 
2741 
2742 
2743 
2744 
2745 
2746 
2747 
2748 
2749 
2750 
2751 
2752 
2753 
2754 
2755 
2756 
2757 void
2758 scheduler(void)
2759 {
2760   struct proc *p;
2761 
2762   for(;;){
2763     
2764     sti();
2765 
2766     
2767     acquire(&ptable.lock);
2768     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2769       if(p->state != RUNNABLE)
2770         continue;
2771 
2772       
2773       
2774       
2775       proc = p;
2776       switchuvm(p);
2777       p->state = RUNNING;
2778       swtch(&cpu->scheduler, p->context);
2779       switchkvm();
2780 
2781       
2782       
2783       proc = 0;
2784     }
2785     release(&ptable.lock);
2786 
2787   }
2788 }
2789 
2790 
2791 
2792 
2793 
2794 
2795 
2796 
2797 
2798 
2799 
2800 
2801 
2802 
2803 
2804 
2805 
2806 
2807 void
2808 sched(void)
2809 {
2810   int intena;
2811 
2812   if(!holding(&ptable.lock))
2813     panic("sched ptable.lock");
2814   if(cpu->ncli != 1)
2815     panic("sched locks");
2816   if(proc->state == RUNNING)
2817     panic("sched running");
2818   if(readeflags()&FL_IF)
2819     panic("sched interruptible");
2820   intena = cpu->intena;
2821   swtch(&proc->context, cpu->scheduler);
2822   cpu->intena = intena;
2823 }
2824 
2825 
2826 void
2827 yield(void)
2828 {
2829   acquire(&ptable.lock);  
2830   proc->state = RUNNABLE;
2831   sched();
2832   release(&ptable.lock);
2833 }
2834 
2835 
2836 
2837 void
2838 forkret(void)
2839 {
2840   static int first = 1;
2841   
2842   release(&ptable.lock);
2843 
2844   if (first) {
2845     
2846     
2847     
2848     first = 0;
2849     iinit(ROOTDEV);
2850     initlog(ROOTDEV);
2851   }
2852 
2853   
2854 }
2855 
2856 
2857 
2858 void
2859 sleep(void *chan, struct spinlock *lk)
2860 {
2861   if(proc == 0)
2862     panic("sleep");
2863 
2864   if(lk == 0)
2865     panic("sleep without lk");
2866 
2867   
2868   
2869   
2870   
2871   
2872   
2873   if(lk != &ptable.lock){  
2874     acquire(&ptable.lock);  
2875     release(lk);
2876   }
2877 
2878   
2879   proc->chan = chan;
2880   proc->state = SLEEPING;
2881   sched();
2882 
2883   
2884   proc->chan = 0;
2885 
2886   
2887   if(lk != &ptable.lock){  
2888     release(&ptable.lock);
2889     acquire(lk);
2890   }
2891 }
2892 
2893 
2894 
2895 
2896 
2897 
2898 
2899 
2900 
2901 
2902 static void
2903 wakeup1(void *chan)
2904 {
2905   struct proc *p;
2906 
2907   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
2908     if(p->state == SLEEPING && p->chan == chan)
2909       p->state = RUNNABLE;
2910 }
2911 
2912 
2913 void
2914 wakeup(void *chan)
2915 {
2916   acquire(&ptable.lock);
2917   wakeup1(chan);
2918   release(&ptable.lock);
2919 }
2920 
2921 
2922 
2923 
2924 int
2925 kill(int pid)
2926 {
2927   struct proc *p;
2928 
2929   acquire(&ptable.lock);
2930   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2931     if(p->pid == pid){
2932       p->killed = 1;
2933       
2934       if(p->state == SLEEPING)
2935         p->state = RUNNABLE;
2936       release(&ptable.lock);
2937       return 0;
2938     }
2939   }
2940   release(&ptable.lock);
2941   return -1;
2942 }
2943 
2944 
2945 
2946 
2947 
2948 
2949 
2950 
2951 
2952 
2953 void
2954 procdump(void)
2955 {
2956   static char *states[] = {
2957   [UNUSED]    "unused",
2958   [EMBRYO]    "embryo",
2959   [SLEEPING]  "sleep ",
2960   [RUNNABLE]  "runble",
2961   [RUNNING]   "run   ",
2962   [ZOMBIE]    "zombie"
2963   };
2964   int i;
2965   struct proc *p;
2966   char *state;
2967   uint pc[10];
2968 
2969   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2970     if(p->state == UNUSED)
2971       continue;
2972     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
2973       state = states[p->state];
2974     else
2975       state = "???";
2976     cprintf("%d %s %s", p->pid, state, p->name);
2977     if(p->state == SLEEPING){
2978       getcallerpcs((uint*)p->context->ebp+2, pc);
2979       for(i=0; i<10 && pc[i] != 0; i++)
2980         cprintf(" %p", pc[i]);
2981     }
2982     cprintf("\n");
2983   }
2984 }
2985 
2986 
2987 
2988 
2989 
2990 
2991 
2992 
2993 
2994 
2995 
2996 
2997 
2998 
2999 
3000 
3001 
3002 
3003 
3004 
3005 
3006 
3007 .globl swtch
3008 swtch:
3009   movl 4(%esp), %eax
3010   movl 8(%esp), %edx
3011 
3012   
3013   pushl %ebp
3014   pushl %ebx
3015   pushl %esi
3016   pushl %edi
3017 
3018   
3019   movl %esp, (%eax)
3020   movl %edx, %esp
3021 
3022   
3023   popl %edi
3024   popl %esi
3025   popl %ebx
3026   popl %ebp
3027   ret
3028 
3029 
3030 
3031 
3032 
3033 
3034 
3035 
3036 
3037 
3038 
3039 
3040 
3041 
3042 
3043 
3044 
3045 
3046 
3047 
3048 
3049 
3050 
3051 
3052 
3053 
3054 #include "types.h"
3055 #include "defs.h"
3056 #include "param.h"
3057 #include "memlayout.h"
3058 #include "mmu.h"
3059 #include "spinlock.h"
3060 
3061 void freerange(void *vstart, void *vend);
3062 extern char end[]; 
3063 
3064 struct run {
3065   struct run *next;
3066 };
3067 
3068 struct {
3069   struct spinlock lock;
3070   int use_lock;
3071   struct run *freelist;
3072 } kmem;
3073 
3074 
3075 
3076 
3077 
3078 
3079 void
3080 kinit1(void *vstart, void *vend)
3081 {
3082   initlock(&kmem.lock, "kmem");
3083   kmem.use_lock = 0;
3084   freerange(vstart, vend);
3085 }
3086 
3087 void
3088 kinit2(void *vstart, void *vend)
3089 {
3090   freerange(vstart, vend);
3091   kmem.use_lock = 1;
3092 }
3093 
3094 
3095 
3096 
3097 
3098 
3099 
3100 void
3101 freerange(void *vstart, void *vend)
3102 {
3103   char *p;
3104   p = (char*)PGROUNDUP((uint)vstart);
3105   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
3106     kfree(p);
3107 }
3108 
3109 
3110 
3111 
3112 
3113 
3114 void
3115 kfree(char *v)
3116 {
3117   struct run *r;
3118 
3119   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
3120     panic("kfree");
3121 
3122   
3123   memset(v, 1, PGSIZE);
3124 
3125   if(kmem.use_lock)
3126     acquire(&kmem.lock);
3127   r = (struct run*)v;
3128   r->next = kmem.freelist;
3129   kmem.freelist = r;
3130   if(kmem.use_lock)
3131     release(&kmem.lock);
3132 }
3133 
3134 
3135 
3136 
3137 char*
3138 kalloc(void)
3139 {
3140   struct run *r;
3141 
3142   if(kmem.use_lock)
3143     acquire(&kmem.lock);
3144   r = kmem.freelist;
3145   if(r)
3146     kmem.freelist = r->next;
3147   if(kmem.use_lock)
3148     release(&kmem.lock);
3149   return (char*)r;
3150 }
3151 
3152 
3153 
3154 
3155 
3156 
3157 
3158 
3159 
3160 
3161 
3162 
3163 
3164 
3165 
3166 
3167 
3168 
3169 
3170 
3171 
3172 
3173 
3174 
3175 
3176 
3177 
3178 
3179 
3180 
3181 
3182 
3183 
3184 
3185 
3186 
3187 
3188 
3189 
3190 
3191 
3192 
3193 
3194 
3195 
3196 
3197 
3198 
3199 
3200 
3201 
3202 
3203 #define T_DIVIDE         0      
3204 #define T_DEBUG          1      
3205 #define T_NMI            2      
3206 #define T_BRKPT          3      
3207 #define T_OFLOW          4      
3208 #define T_BOUND          5      
3209 #define T_ILLOP          6      
3210 #define T_DEVICE         7      
3211 #define T_DBLFLT         8      
3212 
3213 #define T_TSS           10      
3214 #define T_SEGNP         11      
3215 #define T_STACK         12      
3216 #define T_GPFLT         13      
3217 #define T_PGFLT         14      
3218 
3219 #define T_FPERR         16      
3220 #define T_ALIGN         17      
3221 #define T_MCHK          18      
3222 #define T_SIMDERR       19      
3223 
3224 
3225 
3226 #define T_SYSCALL       64      
3227 #define T_DEFAULT      500      
3228 
3229 #define T_IRQ0          32      
3230 
3231 #define IRQ_TIMER        0
3232 #define IRQ_KBD          1
3233 #define IRQ_COM1         4
3234 #define IRQ_IDE         14
3235 #define IRQ_ERROR       19
3236 #define IRQ_SPURIOUS    31
3237 
3238 
3239 
3240 
3241 
3242 
3243 
3244 
3245 
3246 
3247 
3248 
3249 
3250 #!/usr/bin/perl -w
3251 
3252 # Generate vectors.S, the trap/interrupt entry points.
3253 # There has to be one entry point per interrupt number
3254 # since otherwise there's no way for trap() to discover
3255 # the interrupt number.
3256 
3257 print "# generated by vectors.pl - do not edit\n";
3258 print "# handlers\n";
3259 print ".globl alltraps\n";
3260 for(my $i = 0; $i < 256; $i++){
3261     print ".globl vector$i\n";
3262     print "vector$i:\n";
3263     if(!($i == 8 || ($i >= 10 && $i <= 14) || $i == 17)){
3264         print "  pushl \$0\n";
3265     }
3266     print "  pushl \$$i\n";
3267     print "  jmp alltraps\n";
3268 }
3269 
3270 print "\n# vector table\n";
3271 print ".data\n";
3272 print ".globl vectors\n";
3273 print "vectors:\n";
3274 for(my $i = 0; $i < 256; $i++){
3275     print "  .long vector$i\n";
3276 }
3277 
3278 # sample output:
3279 #   # handlers
3280 #   .globl alltraps
3281 #   .globl vector0
3282 #   vector0:
3283 #     pushl $0
3284 #     pushl $0
3285 #     jmp alltraps
3286 #   ...
3287 #
3288 #   # vector table
3289 #   .data
3290 #   .globl vectors
3291 #   vectors:
3292 #     .long vector0
3293 #     .long vector1
3294 #     .long vector2
3295 #   ...
3296 
3297 
3298 
3299 
3300 
3301 
3302   
3303 .globl alltraps
3304 alltraps:
3305   
3306   pushl %ds
3307   pushl %es
3308   pushl %fs
3309   pushl %gs
3310   pushal
3311 
3312   
3313   movw $(SEG_KDATA<<3), %ax
3314   movw %ax, %ds
3315   movw %ax, %es
3316   movw $(SEG_KCPU<<3), %ax
3317   movw %ax, %fs
3318   movw %ax, %gs
3319 
3320   
3321   pushl %esp
3322   call trap
3323   addl $4, %esp
3324 
3325   
3326 .globl trapret
3327 trapret:
3328   popal
3329   popl %gs
3330   popl %fs
3331   popl %es
3332   popl %ds
3333   addl $0x8, %esp  
3334   iret
3335 
3336 
3337 
3338 
3339 
3340 
3341 
3342 
3343 
3344 
3345 
3346 
3347 
3348 
3349 
3350 #include "types.h"
3351 #include "defs.h"
3352 #include "param.h"
3353 #include "memlayout.h"
3354 #include "mmu.h"
3355 #include "proc.h"
3356 #include "x86.h"
3357 #include "traps.h"
3358 #include "spinlock.h"
3359 
3360 
3361 struct gatedesc idt[256];
3362 extern uint vectors[];  
3363 struct spinlock tickslock;
3364 uint ticks;
3365 
3366 void
3367 tvinit(void)
3368 {
3369   int i;
3370 
3371   for(i = 0; i < 256; i++)
3372     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
3373   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
3374 
3375   initlock(&tickslock, "time");
3376 }
3377 
3378 void
3379 idtinit(void)
3380 {
3381   lidt(idt, sizeof(idt));
3382 }
3383 
3384 
3385 
3386 
3387 
3388 
3389 
3390 
3391 
3392 
3393 
3394 
3395 
3396 
3397 
3398 
3399 
3400 void
3401 trap(struct trapframe *tf)
3402 {
3403   if(tf->trapno == T_SYSCALL){
3404     if(proc->killed)
3405       exit();
3406     proc->tf = tf;
3407     syscall();
3408     if(proc->killed)
3409       exit();
3410     return;
3411   }
3412 
3413   switch(tf->trapno){
3414   case T_IRQ0 + IRQ_TIMER:
3415     if(cpunum() == 0){
3416       acquire(&tickslock);
3417       ticks++;
3418       wakeup(&ticks);
3419       release(&tickslock);
3420     }
3421     lapiceoi();
3422     break;
3423   case T_IRQ0 + IRQ_IDE:
3424     ideintr();
3425     lapiceoi();
3426     break;
3427   case T_IRQ0 + IRQ_IDE+1:
3428     
3429     break;
3430   case T_IRQ0 + IRQ_KBD:
3431     kbdintr();
3432     lapiceoi();
3433     break;
3434   case T_IRQ0 + IRQ_COM1:
3435     uartintr();
3436     lapiceoi();
3437     break;
3438   case T_IRQ0 + 7:
3439   case T_IRQ0 + IRQ_SPURIOUS:
3440     cprintf("cpu%d: spurious interrupt at %x:%x\n",
3441             cpunum(), tf->cs, tf->eip);
3442     lapiceoi();
3443     break;
3444 
3445 
3446 
3447 
3448 
3449 
3450   default:
3451     if(proc == 0 || (tf->cs&3) == 0){
3452       
3453       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
3454               tf->trapno, cpunum(), tf->eip, rcr2());
3455       panic("trap");
3456     }
3457     
3458     cprintf("pid %d %s: trap %d err %d on cpu %d "
3459             "eip 0x%x addr 0x%x--kill proc\n",
3460             proc->pid, proc->name, tf->trapno, tf->err, cpunum(), tf->eip,
3461             rcr2());
3462     proc->killed = 1;
3463   }
3464 
3465   
3466   
3467   
3468   if(proc && proc->killed && (tf->cs&3) == DPL_USER)
3469     exit();
3470 
3471   
3472   
3473   if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER)
3474     yield();
3475 
3476   
3477   if(proc && proc->killed && (tf->cs&3) == DPL_USER)
3478     exit();
3479 }
3480 
3481 
3482 
3483 
3484 
3485 
3486 
3487 
3488 
3489 
3490 
3491 
3492 
3493 
3494 
3495 
3496 
3497 
3498 
3499 
3500 
3501 #define SYS_fork    1
3502 #define SYS_exit    2
3503 #define SYS_wait    3
3504 #define SYS_pipe    4
3505 #define SYS_read    5
3506 #define SYS_kill    6
3507 #define SYS_exec    7
3508 #define SYS_fstat   8
3509 #define SYS_chdir   9
3510 #define SYS_dup    10
3511 #define SYS_getpid 11
3512 #define SYS_sbrk   12
3513 #define SYS_sleep  13
3514 #define SYS_uptime 14
3515 #define SYS_open   15
3516 #define SYS_write  16
3517 #define SYS_mknod  17
3518 #define SYS_unlink 18
3519 #define SYS_link   19
3520 #define SYS_mkdir  20
3521 #define SYS_close  21
3522 
3523 
3524 
3525 
3526 
3527 
3528 
3529 
3530 
3531 
3532 
3533 
3534 
3535 
3536 
3537 
3538 
3539 
3540 
3541 
3542 
3543 
3544 
3545 
3546 
3547 
3548 
3549 
3550 #include "types.h"
3551 #include "defs.h"
3552 #include "param.h"
3553 #include "memlayout.h"
3554 #include "mmu.h"
3555 #include "proc.h"
3556 #include "x86.h"
3557 #include "syscall.h"
3558 
3559 
3560 
3561 
3562 
3563 
3564 
3565 
3566 int
3567 fetchint(uint addr, int *ip)
3568 {
3569   if(addr >= proc->sz || addr+4 > proc->sz)
3570     return -1;
3571   *ip = *(int*)(addr);
3572   return 0;
3573 }
3574 
3575 
3576 
3577 
3578 int
3579 fetchstr(uint addr, char **pp)
3580 {
3581   char *s, *ep;
3582 
3583   if(addr >= proc->sz)
3584     return -1;
3585   *pp = (char*)addr;
3586   ep = (char*)proc->sz;
3587   for(s = *pp; s < ep; s++)
3588     if(*s == 0)
3589       return s - *pp;
3590   return -1;
3591 }
3592 
3593 
3594 int
3595 argint(int n, int *ip)
3596 {
3597   return fetchint(proc->tf->esp + 4 + 4*n, ip);
3598 }
3599 
3600 
3601 
3602 
3603 int
3604 argptr(int n, char **pp, int size)
3605 {
3606   int i;
3607 
3608   if(argint(n, &i) < 0)
3609     return -1;
3610   if((uint)i >= proc->sz || (uint)i+size > proc->sz)
3611     return -1;
3612   *pp = (char*)i;
3613   return 0;
3614 }
3615 
3616 
3617 
3618 
3619 
3620 int
3621 argstr(int n, char **pp)
3622 {
3623   int addr;
3624   if(argint(n, &addr) < 0)
3625     return -1;
3626   return fetchstr(addr, pp);
3627 }
3628 
3629 extern int sys_chdir(void);
3630 extern int sys_close(void);
3631 extern int sys_dup(void);
3632 extern int sys_exec(void);
3633 extern int sys_exit(void);
3634 extern int sys_fork(void);
3635 extern int sys_fstat(void);
3636 extern int sys_getpid(void);
3637 extern int sys_kill(void);
3638 extern int sys_link(void);
3639 extern int sys_mkdir(void);
3640 extern int sys_mknod(void);
3641 extern int sys_open(void);
3642 extern int sys_pipe(void);
3643 extern int sys_read(void);
3644 extern int sys_sbrk(void);
3645 extern int sys_sleep(void);
3646 extern int sys_unlink(void);
3647 extern int sys_wait(void);
3648 extern int sys_write(void);
3649 extern int sys_uptime(void);
3650 static int (*syscalls[])(void) = {
3651 [SYS_fork]    sys_fork,
3652 [SYS_exit]    sys_exit,
3653 [SYS_wait]    sys_wait,
3654 [SYS_pipe]    sys_pipe,
3655 [SYS_read]    sys_read,
3656 [SYS_kill]    sys_kill,
3657 [SYS_exec]    sys_exec,
3658 [SYS_fstat]   sys_fstat,
3659 [SYS_chdir]   sys_chdir,
3660 [SYS_dup]     sys_dup,
3661 [SYS_getpid]  sys_getpid,
3662 [SYS_sbrk]    sys_sbrk,
3663 [SYS_sleep]   sys_sleep,
3664 [SYS_uptime]  sys_uptime,
3665 [SYS_open]    sys_open,
3666 [SYS_write]   sys_write,
3667 [SYS_mknod]   sys_mknod,
3668 [SYS_unlink]  sys_unlink,
3669 [SYS_link]    sys_link,
3670 [SYS_mkdir]   sys_mkdir,
3671 [SYS_close]   sys_close,
3672 };
3673 
3674 void
3675 syscall(void)
3676 {
3677   int num;
3678 
3679   num = proc->tf->eax;
3680   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
3681     proc->tf->eax = syscalls[num]();
3682   } else {
3683     cprintf("%d %s: unknown sys call %d\n",
3684             proc->pid, proc->name, num);
3685     proc->tf->eax = -1;
3686   }
3687 }
3688 
3689 
3690 
3691 
3692 
3693 
3694 
3695 
3696 
3697 
3698 
3699 
3700 #include "types.h"
3701 #include "x86.h"
3702 #include "defs.h"
3703 #include "date.h"
3704 #include "param.h"
3705 #include "memlayout.h"
3706 #include "mmu.h"
3707 #include "proc.h"
3708 
3709 int
3710 sys_fork(void)
3711 {
3712   return fork();
3713 }
3714 
3715 int
3716 sys_exit(void)
3717 {
3718   exit();
3719   return 0;  
3720 }
3721 
3722 int
3723 sys_wait(void)
3724 {
3725   return wait();
3726 }
3727 
3728 int
3729 sys_kill(void)
3730 {
3731   int pid;
3732 
3733   if(argint(0, &pid) < 0)
3734     return -1;
3735   return kill(pid);
3736 }
3737 
3738 int
3739 sys_getpid(void)
3740 {
3741   return proc->pid;
3742 }
3743 
3744 
3745 
3746 
3747 
3748 
3749 
3750 int
3751 sys_sbrk(void)
3752 {
3753   int addr;
3754   int n;
3755 
3756   if(argint(0, &n) < 0)
3757     return -1;
3758   addr = proc->sz;
3759   if(growproc(n) < 0)
3760     return -1;
3761   return addr;
3762 }
3763 
3764 int
3765 sys_sleep(void)
3766 {
3767   int n;
3768   uint ticks0;
3769 
3770   if(argint(0, &n) < 0)
3771     return -1;
3772   acquire(&tickslock);
3773   ticks0 = ticks;
3774   while(ticks - ticks0 < n){
3775     if(proc->killed){
3776       release(&tickslock);
3777       return -1;
3778     }
3779     sleep(&ticks, &tickslock);
3780   }
3781   release(&tickslock);
3782   return 0;
3783 }
3784 
3785 
3786 
3787 int
3788 sys_uptime(void)
3789 {
3790   uint xticks;
3791 
3792   acquire(&tickslock);
3793   xticks = ticks;
3794   release(&tickslock);
3795   return xticks;
3796 }
3797 
3798 
3799 
3800 struct buf {
3801   int flags;
3802   uint dev;
3803   uint blockno;
3804   struct buf *prev; 
3805   struct buf *next;
3806   struct buf *qnext; 
3807   uchar data[BSIZE];
3808 };
3809 #define B_BUSY  0x1  
3810 #define B_VALID 0x2  
3811 #define B_DIRTY 0x4  
3812 
3813 
3814 
3815 
3816 
3817 
3818 
3819 
3820 
3821 
3822 
3823 
3824 
3825 
3826 
3827 
3828 
3829 
3830 
3831 
3832 
3833 
3834 
3835 
3836 
3837 
3838 
3839 
3840 
3841 
3842 
3843 
3844 
3845 
3846 
3847 
3848 
3849 
3850 #define O_RDONLY  0x000
3851 #define O_WRONLY  0x001
3852 #define O_RDWR    0x002
3853 #define O_CREATE  0x200
3854 
3855 
3856 
3857 
3858 
3859 
3860 
3861 
3862 
3863 
3864 
3865 
3866 
3867 
3868 
3869 
3870 
3871 
3872 
3873 
3874 
3875 
3876 
3877 
3878 
3879 
3880 
3881 
3882 
3883 
3884 
3885 
3886 
3887 
3888 
3889 
3890 
3891 
3892 
3893 
3894 
3895 
3896 
3897 
3898 
3899 
3900 #define T_DIR  1   
3901 #define T_FILE 2   
3902 #define T_DEV  3   
3903 
3904 struct stat {
3905   short type;  
3906   int dev;     
3907   uint ino;    
3908   short nlink; 
3909   uint size;   
3910 };
3911 
3912 
3913 
3914 
3915 
3916 
3917 
3918 
3919 
3920 
3921 
3922 
3923 
3924 
3925 
3926 
3927 
3928 
3929 
3930 
3931 
3932 
3933 
3934 
3935 
3936 
3937 
3938 
3939 
3940 
3941 
3942 
3943 
3944 
3945 
3946 
3947 
3948 
3949 
3950 
3951 
3952 
3953 
3954 #define ROOTINO 1  
3955 #define BSIZE 512  
3956 
3957 
3958 
3959 
3960 
3961 
3962 
3963 struct superblock {
3964   uint size;         
3965   uint nblocks;      
3966   uint ninodes;      
3967   uint nlog;         
3968   uint logstart;     
3969   uint inodestart;   
3970   uint bmapstart;    
3971 };
3972 
3973 #define NDIRECT 12
3974 #define NINDIRECT (BSIZE / sizeof(uint))
3975 #define MAXFILE (NDIRECT + NINDIRECT)
3976 
3977 
3978 struct dinode {
3979   short type;           
3980   short major;          
3981   short minor;          
3982   short nlink;          
3983   uint size;            
3984   uint addrs[NDIRECT+1];   
3985 };
3986 
3987 
3988 
3989 
3990 
3991 
3992 
3993 
3994 
3995 
3996 
3997 
3998 
3999 
4000 
4001 #define IPB           (BSIZE / sizeof(struct dinode))
4002 
4003 
4004 #define IBLOCK(i, sb)     ((i) / IPB + sb.inodestart)
4005 
4006 
4007 #define BPB           (BSIZE*8)
4008 
4009 
4010 #define BBLOCK(b, sb) (b/BPB + sb.bmapstart)
4011 
4012 
4013 #define DIRSIZ 14
4014 
4015 struct dirent {
4016   ushort inum;
4017   char name[DIRSIZ];
4018 };
4019 
4020 
4021 
4022 
4023 
4024 
4025 
4026 
4027 
4028 
4029 
4030 
4031 
4032 
4033 
4034 
4035 
4036 
4037 
4038 
4039 
4040 
4041 
4042 
4043 
4044 
4045 
4046 
4047 
4048 
4049 
4050 struct file {
4051   enum { FD_NONE, FD_PIPE, FD_INODE } type;
4052   int ref; 
4053   char readable;
4054   char writable;
4055   struct pipe *pipe;
4056   struct inode *ip;
4057   uint off;
4058 };
4059 
4060 
4061 
4062 struct inode {
4063   uint dev;           
4064   uint inum;          
4065   int ref;            
4066   int flags;          
4067 
4068   short type;         
4069   short major;
4070   short minor;
4071   short nlink;
4072   uint size;
4073   uint addrs[NDIRECT+1];
4074 };
4075 #define I_BUSY 0x1
4076 #define I_VALID 0x2
4077 
4078 
4079 
4080 struct devsw {
4081   int (*read)(struct inode*, char*, int);
4082   int (*write)(struct inode*, char*, int);
4083 };
4084 
4085 extern struct devsw devsw[];
4086 
4087 #define CONSOLE 1
4088 
4089 
4090 
4091 
4092 
4093 
4094 
4095 
4096 
4097 
4098 
4099 
4100 
4101 
4102 
4103 
4104 
4105 
4106 
4107 
4108 
4109 
4110 
4111 
4112 
4113 
4114 
4115 
4116 
4117 
4118 
4119 
4120 
4121 
4122 
4123 
4124 
4125 
4126 
4127 
4128 
4129 
4130 
4131 
4132 
4133 
4134 
4135 
4136 
4137 
4138 
4139 
4140 
4141 
4142 
4143 
4144 
4145 
4146 
4147 
4148 
4149 
4150 
4151 
4152 #include "types.h"
4153 #include "defs.h"
4154 #include "param.h"
4155 #include "memlayout.h"
4156 #include "mmu.h"
4157 #include "proc.h"
4158 #include "x86.h"
4159 #include "traps.h"
4160 #include "spinlock.h"
4161 #include "fs.h"
4162 #include "buf.h"
4163 
4164 #define SECTOR_SIZE   512
4165 #define IDE_BSY       0x80
4166 #define IDE_DRDY      0x40
4167 #define IDE_DF        0x20
4168 #define IDE_ERR       0x01
4169 
4170 #define IDE_CMD_READ  0x20
4171 #define IDE_CMD_WRITE 0x30
4172 #define IDE_CMD_RDMUL 0xc4
4173 #define IDE_CMD_WRMUL 0xc5
4174 
4175 
4176 
4177 
4178 
4179 static struct spinlock idelock;
4180 static struct buf *idequeue;
4181 
4182 static int havedisk1;
4183 static void idestart(struct buf*);
4184 
4185 
4186 static int
4187 idewait(int checkerr)
4188 {
4189   int r;
4190 
4191   while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
4192     ;
4193   if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
4194     return -1;
4195   return 0;
4196 }
4197 
4198 
4199 
4200 void
4201 ideinit(void)
4202 {
4203   int i;
4204 
4205   initlock(&idelock, "ide");
4206   picenable(IRQ_IDE);
4207   ioapicenable(IRQ_IDE, ncpu - 1);
4208   idewait(0);
4209 
4210   
4211   outb(0x1f6, 0xe0 | (1<<4));
4212   for(i=0; i<1000; i++){
4213     if(inb(0x1f7) != 0){
4214       havedisk1 = 1;
4215       break;
4216     }
4217   }
4218 
4219   
4220   outb(0x1f6, 0xe0 | (0<<4));
4221 }
4222 
4223 
4224 static void
4225 idestart(struct buf *b)
4226 {
4227   if(b == 0)
4228     panic("idestart");
4229   if(b->blockno >= FSSIZE)
4230     panic("incorrect blockno");
4231   int sector_per_block =  BSIZE/SECTOR_SIZE;
4232   int sector = b->blockno * sector_per_block;
4233   int read_cmd = (sector_per_block == 1) ? IDE_CMD_READ :  IDE_CMD_RDMUL;
4234   int write_cmd = (sector_per_block == 1) ? IDE_CMD_WRITE : IDE_CMD_WRMUL;
4235 
4236   if (sector_per_block > 7) panic("idestart");
4237 
4238   idewait(0);
4239   outb(0x3f6, 0);  
4240   outb(0x1f2, sector_per_block);  
4241   outb(0x1f3, sector & 0xff);
4242   outb(0x1f4, (sector >> 8) & 0xff);
4243   outb(0x1f5, (sector >> 16) & 0xff);
4244   outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
4245   if(b->flags & B_DIRTY){
4246     outb(0x1f7, write_cmd);
4247     outsl(0x1f0, b->data, BSIZE/4);
4248   } else {
4249     outb(0x1f7, read_cmd);
4250   }
4251 }
4252 
4253 
4254 void
4255 ideintr(void)
4256 {
4257   struct buf *b;
4258 
4259   
4260   acquire(&idelock);
4261   if((b = idequeue) == 0){
4262     release(&idelock);
4263     
4264     return;
4265   }
4266   idequeue = b->qnext;
4267 
4268   
4269   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
4270     insl(0x1f0, b->data, BSIZE/4);
4271 
4272   
4273   b->flags |= B_VALID;
4274   b->flags &= ~B_DIRTY;
4275   wakeup(b);
4276 
4277   
4278   if(idequeue != 0)
4279     idestart(idequeue);
4280 
4281   release(&idelock);
4282 }
4283 
4284 
4285 
4286 
4287 
4288 
4289 
4290 
4291 
4292 
4293 
4294 
4295 
4296 
4297 
4298 
4299 
4300 
4301 
4302 
4303 void
4304 iderw(struct buf *b)
4305 {
4306   struct buf **pp;
4307 
4308   if(!(b->flags & B_BUSY))
4309     panic("iderw: buf not busy");
4310   if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
4311     panic("iderw: nothing to do");
4312   if(b->dev != 0 && !havedisk1)
4313     panic("iderw: ide disk 1 not present");
4314 
4315   acquire(&idelock);  
4316 
4317   
4318   b->qnext = 0;
4319   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  
4320     ;
4321   *pp = b;
4322 
4323   
4324   if(idequeue == b)
4325     idestart(b);
4326 
4327   
4328   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
4329     sleep(b, &idelock);
4330   }
4331 
4332   release(&idelock);
4333 }
4334 
4335 
4336 
4337 
4338 
4339 
4340 
4341 
4342 
4343 
4344 
4345 
4346 
4347 
4348 
4349 
4350 
4351 
4352 
4353 
4354 
4355 
4356 
4357 
4358 
4359 
4360 
4361 
4362 
4363 
4364 
4365 
4366 
4367 
4368 
4369 
4370 
4371 
4372 #include "types.h"
4373 #include "defs.h"
4374 #include "param.h"
4375 #include "spinlock.h"
4376 #include "fs.h"
4377 #include "buf.h"
4378 
4379 struct {
4380   struct spinlock lock;
4381   struct buf buf[NBUF];
4382 
4383   
4384   
4385   struct buf head;
4386 } bcache;
4387 
4388 void
4389 binit(void)
4390 {
4391   struct buf *b;
4392 
4393   initlock(&bcache.lock, "bcache");
4394 
4395 
4396 
4397 
4398 
4399 
4400   
4401   bcache.head.prev = &bcache.head;
4402   bcache.head.next = &bcache.head;
4403   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
4404     b->next = bcache.head.next;
4405     b->prev = &bcache.head;
4406     b->dev = -1;
4407     bcache.head.next->prev = b;
4408     bcache.head.next = b;
4409   }
4410 }
4411 
4412 
4413 
4414 
4415 static struct buf*
4416 bget(uint dev, uint blockno)
4417 {
4418   struct buf *b;
4419 
4420   acquire(&bcache.lock);
4421 
4422  loop:
4423   
4424   for(b = bcache.head.next; b != &bcache.head; b = b->next){
4425     if(b->dev == dev && b->blockno == blockno){
4426       if(!(b->flags & B_BUSY)){
4427         b->flags |= B_BUSY;
4428         release(&bcache.lock);
4429         return b;
4430       }
4431       sleep(b, &bcache.lock);
4432       goto loop;
4433     }
4434   }
4435 
4436   
4437   
4438   
4439   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
4440     if((b->flags & B_BUSY) == 0 && (b->flags & B_DIRTY) == 0){
4441       b->dev = dev;
4442       b->blockno = blockno;
4443       b->flags = B_BUSY;
4444       release(&bcache.lock);
4445       return b;
4446     }
4447   }
4448   panic("bget: no buffers");
4449 }
4450 
4451 struct buf*
4452 bread(uint dev, uint blockno)
4453 {
4454   struct buf *b;
4455 
4456   b = bget(dev, blockno);
4457   if(!(b->flags & B_VALID)) {
4458     iderw(b);
4459   }
4460   return b;
4461 }
4462 
4463 
4464 void
4465 bwrite(struct buf *b)
4466 {
4467   if((b->flags & B_BUSY) == 0)
4468     panic("bwrite");
4469   b->flags |= B_DIRTY;
4470   iderw(b);
4471 }
4472 
4473 
4474 
4475 void
4476 brelse(struct buf *b)
4477 {
4478   if((b->flags & B_BUSY) == 0)
4479     panic("brelse");
4480 
4481   acquire(&bcache.lock);
4482 
4483   b->next->prev = b->prev;
4484   b->prev->next = b->next;
4485   b->next = bcache.head.next;
4486   b->prev = &bcache.head;
4487   bcache.head.next->prev = b;
4488   bcache.head.next = b;
4489 
4490   b->flags &= ~B_BUSY;
4491   wakeup(b);
4492 
4493   release(&bcache.lock);
4494 }
4495 
4496 
4497 
4498 
4499 
4500 
4501 
4502 
4503 
4504 
4505 
4506 
4507 
4508 
4509 
4510 
4511 
4512 
4513 
4514 
4515 
4516 
4517 
4518 
4519 
4520 
4521 
4522 
4523 
4524 
4525 
4526 
4527 
4528 
4529 
4530 
4531 
4532 
4533 
4534 
4535 
4536 
4537 
4538 
4539 
4540 
4541 
4542 
4543 
4544 
4545 
4546 
4547 
4548 
4549 
4550 #include "types.h"
4551 #include "defs.h"
4552 #include "param.h"
4553 #include "spinlock.h"
4554 #include "fs.h"
4555 #include "buf.h"
4556 
4557 
4558 
4559 
4560 
4561 
4562 
4563 
4564 
4565 
4566 
4567 
4568 
4569 
4570 
4571 
4572 
4573 
4574 
4575 
4576 
4577 
4578 
4579 
4580 
4581 
4582 struct logheader {
4583   int n;
4584   int block[LOGSIZE];
4585 };
4586 
4587 struct log {
4588   struct spinlock lock;
4589   int start;
4590   int size;
4591   int outstanding; 
4592   int committing;  
4593   int dev;
4594   struct logheader lh;
4595 };
4596 
4597 
4598 
4599 
4600 struct log log;
4601 
4602 static void recover_from_log(void);
4603 static void commit();
4604 
4605 void
4606 initlog(int dev)
4607 {
4608   if (sizeof(struct logheader) >= BSIZE)
4609     panic("initlog: too big logheader");
4610 
4611   struct superblock sb;
4612   initlock(&log.lock, "log");
4613   readsb(dev, &sb);
4614   log.start = sb.logstart;
4615   log.size = sb.nlog;
4616   log.dev = dev;
4617   recover_from_log();
4618 }
4619 
4620 
4621 static void
4622 install_trans(void)
4623 {
4624   int tail;
4625 
4626   for (tail = 0; tail < log.lh.n; tail++) {
4627     struct buf *lbuf = bread(log.dev, log.start+tail+1); 
4628     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); 
4629     memmove(dbuf->data, lbuf->data, BSIZE);  
4630     bwrite(dbuf);  
4631     brelse(lbuf);
4632     brelse(dbuf);
4633   }
4634 }
4635 
4636 
4637 static void
4638 read_head(void)
4639 {
4640   struct buf *buf = bread(log.dev, log.start);
4641   struct logheader *lh = (struct logheader *) (buf->data);
4642   int i;
4643   log.lh.n = lh->n;
4644   for (i = 0; i < log.lh.n; i++) {
4645     log.lh.block[i] = lh->block[i];
4646   }
4647   brelse(buf);
4648 }
4649 
4650 
4651 
4652 
4653 static void
4654 write_head(void)
4655 {
4656   struct buf *buf = bread(log.dev, log.start);
4657   struct logheader *hb = (struct logheader *) (buf->data);
4658   int i;
4659   hb->n = log.lh.n;
4660   for (i = 0; i < log.lh.n; i++) {
4661     hb->block[i] = log.lh.block[i];
4662   }
4663   bwrite(buf);
4664   brelse(buf);
4665 }
4666 
4667 static void
4668 recover_from_log(void)
4669 {
4670   read_head();
4671   install_trans(); 
4672   log.lh.n = 0;
4673   write_head(); 
4674 }
4675 
4676 
4677 void
4678 begin_op(void)
4679 {
4680   acquire(&log.lock);
4681   while(1){
4682     if(log.committing){
4683       sleep(&log, &log.lock);
4684     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
4685       
4686       sleep(&log, &log.lock);
4687     } else {
4688       log.outstanding += 1;
4689       release(&log.lock);
4690       break;
4691     }
4692   }
4693 }
4694 
4695 
4696 
4697 
4698 
4699 
4700 
4701 
4702 void
4703 end_op(void)
4704 {
4705   int do_commit = 0;
4706 
4707   acquire(&log.lock);
4708   log.outstanding -= 1;
4709   if(log.committing)
4710     panic("log.committing");
4711   if(log.outstanding == 0){
4712     do_commit = 1;
4713     log.committing = 1;
4714   } else {
4715     
4716     wakeup(&log);
4717   }
4718   release(&log.lock);
4719 
4720   if(do_commit){
4721     
4722     
4723     commit();
4724     acquire(&log.lock);
4725     log.committing = 0;
4726     wakeup(&log);
4727     release(&log.lock);
4728   }
4729 }
4730 
4731 
4732 static void
4733 write_log(void)
4734 {
4735   int tail;
4736 
4737   for (tail = 0; tail < log.lh.n; tail++) {
4738     struct buf *to = bread(log.dev, log.start+tail+1); 
4739     struct buf *from = bread(log.dev, log.lh.block[tail]); 
4740     memmove(to->data, from->data, BSIZE);
4741     bwrite(to);  
4742     brelse(from);
4743     brelse(to);
4744   }
4745 }
4746 
4747 
4748 
4749 
4750 static void
4751 commit()
4752 {
4753   if (log.lh.n > 0) {
4754     write_log();     
4755     write_head();    
4756     install_trans(); 
4757     log.lh.n = 0;
4758     write_head();    
4759   }
4760 }
4761 
4762 
4763 
4764 
4765 
4766 
4767 
4768 
4769 
4770 
4771 void
4772 log_write(struct buf *b)
4773 {
4774   int i;
4775 
4776   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
4777     panic("too big a transaction");
4778   if (log.outstanding < 1)
4779     panic("log_write outside of trans");
4780 
4781   acquire(&log.lock);
4782   for (i = 0; i < log.lh.n; i++) {
4783     if (log.lh.block[i] == b->blockno)   
4784       break;
4785   }
4786   log.lh.block[i] = b->blockno;
4787   if (i == log.lh.n)
4788     log.lh.n++;
4789   b->flags |= B_DIRTY; 
4790   release(&log.lock);
4791 }
4792 
4793 
4794 
4795 
4796 
4797 
4798 
4799 
4800 
4801 
4802 
4803 
4804 
4805 
4806 
4807 
4808 
4809 
4810 
4811 #include "types.h"
4812 #include "defs.h"
4813 #include "param.h"
4814 #include "stat.h"
4815 #include "mmu.h"
4816 #include "proc.h"
4817 #include "spinlock.h"
4818 #include "fs.h"
4819 #include "buf.h"
4820 #include "file.h"
4821 
4822 #define min(a, b) ((a) < (b) ? (a) : (b))
4823 static void itrunc(struct inode*);
4824 
4825 
4826 struct superblock sb;
4827 
4828 
4829 void
4830 readsb(int dev, struct superblock *sb)
4831 {
4832   struct buf *bp;
4833 
4834   bp = bread(dev, 1);
4835   memmove(sb, bp->data, sizeof(*sb));
4836   brelse(bp);
4837 }
4838 
4839 
4840 static void
4841 bzero(int dev, int bno)
4842 {
4843   struct buf *bp;
4844 
4845   bp = bread(dev, bno);
4846   memset(bp->data, 0, BSIZE);
4847   log_write(bp);
4848   brelse(bp);
4849 }
4850 
4851 
4852 
4853 static uint
4854 balloc(uint dev)
4855 {
4856   int b, bi, m;
4857   struct buf *bp;
4858 
4859   bp = 0;
4860   for(b = 0; b < sb.size; b += BPB){
4861     bp = bread(dev, BBLOCK(b, sb));
4862     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
4863       m = 1 << (bi % 8);
4864       if((bp->data[bi/8] & m) == 0){  
4865         bp->data[bi/8] |= m;  
4866         log_write(bp);
4867         brelse(bp);
4868         bzero(dev, b + bi);
4869         return b + bi;
4870       }
4871     }
4872     brelse(bp);
4873   }
4874   panic("balloc: out of blocks");
4875 }
4876 
4877 
4878 static void
4879 bfree(int dev, uint b)
4880 {
4881   struct buf *bp;
4882   int bi, m;
4883 
4884   readsb(dev, &sb);
4885   bp = bread(dev, BBLOCK(b, sb));
4886   bi = b % BPB;
4887   m = 1 << (bi % 8);
4888   if((bp->data[bi/8] & m) == 0)
4889     panic("freeing free block");
4890   bp->data[bi/8] &= ~m;
4891   log_write(bp);
4892   brelse(bp);
4893 }
4894 
4895 
4896 
4897 
4898 
4899 
4900 
4901 
4902 
4903 
4904 
4905 
4906 
4907 
4908 
4909 
4910 
4911 
4912 
4913 
4914 
4915 
4916 
4917 
4918 
4919 
4920 
4921 
4922 
4923 
4924 
4925 
4926 
4927 
4928 
4929 
4930 
4931 
4932 
4933 
4934 
4935 
4936 
4937 
4938 
4939 
4940 
4941 
4942 
4943 
4944 
4945 
4946 
4947 
4948 
4949 
4950 
4951 
4952 
4953 
4954 
4955 
4956 
4957 
4958 
4959 
4960 
4961 
4962 struct {
4963   struct spinlock lock;
4964   struct inode inode[NINODE];
4965 } icache;
4966 
4967 void
4968 iinit(int dev)
4969 {
4970   initlock(&icache.lock, "icache");
4971   readsb(dev, &sb);
4972   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
4973           inodestart %d bmap start %d\n", sb.size, sb.nblocks,
4974           sb.ninodes, sb.nlog, sb.logstart, sb.inodestart,
4975           sb.bmapstart);
4976 }
4977 
4978 static struct inode* iget(uint dev, uint inum);
4979 
4980 
4981 
4982 
4983 
4984 
4985 
4986 
4987 
4988 
4989 
4990 
4991 
4992 
4993 
4994 
4995 
4996 
4997 
4998 
4999 
5000 
5001 
5002 struct inode*
5003 ialloc(uint dev, short type)
5004 {
5005   int inum;
5006   struct buf *bp;
5007   struct dinode *dip;
5008 
5009   for(inum = 1; inum < sb.ninodes; inum++){
5010     bp = bread(dev, IBLOCK(inum, sb));
5011     dip = (struct dinode*)bp->data + inum%IPB;
5012     if(dip->type == 0){  
5013       memset(dip, 0, sizeof(*dip));
5014       dip->type = type;
5015       log_write(bp);   
5016       brelse(bp);
5017       return iget(dev, inum);
5018     }
5019     brelse(bp);
5020   }
5021   panic("ialloc: no inodes");
5022 }
5023 
5024 
5025 void
5026 iupdate(struct inode *ip)
5027 {
5028   struct buf *bp;
5029   struct dinode *dip;
5030 
5031   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
5032   dip = (struct dinode*)bp->data + ip->inum%IPB;
5033   dip->type = ip->type;
5034   dip->major = ip->major;
5035   dip->minor = ip->minor;
5036   dip->nlink = ip->nlink;
5037   dip->size = ip->size;
5038   memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
5039   log_write(bp);
5040   brelse(bp);
5041 }
5042 
5043 
5044 
5045 
5046 
5047 
5048 
5049 
5050 
5051 
5052 
5053 static struct inode*
5054 iget(uint dev, uint inum)
5055 {
5056   struct inode *ip, *empty;
5057 
5058   acquire(&icache.lock);
5059 
5060   
5061   empty = 0;
5062   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
5063     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
5064       ip->ref++;
5065       release(&icache.lock);
5066       return ip;
5067     }
5068     if(empty == 0 && ip->ref == 0)    
5069       empty = ip;
5070   }
5071 
5072   
5073   if(empty == 0)
5074     panic("iget: no inodes");
5075 
5076   ip = empty;
5077   ip->dev = dev;
5078   ip->inum = inum;
5079   ip->ref = 1;
5080   ip->flags = 0;
5081   release(&icache.lock);
5082 
5083   return ip;
5084 }
5085 
5086 
5087 
5088 struct inode*
5089 idup(struct inode *ip)
5090 {
5091   acquire(&icache.lock);
5092   ip->ref++;
5093   release(&icache.lock);
5094   return ip;
5095 }
5096 
5097 
5098 
5099 
5100 
5101 
5102 void
5103 ilock(struct inode *ip)
5104 {
5105   struct buf *bp;
5106   struct dinode *dip;
5107 
5108   if(ip == 0 || ip->ref < 1)
5109     panic("ilock");
5110 
5111   acquire(&icache.lock);
5112   while(ip->flags & I_BUSY)
5113     sleep(ip, &icache.lock);
5114   ip->flags |= I_BUSY;
5115   release(&icache.lock);
5116 
5117   if(!(ip->flags & I_VALID)){
5118     bp = bread(ip->dev, IBLOCK(ip->inum, sb));
5119     dip = (struct dinode*)bp->data + ip->inum%IPB;
5120     ip->type = dip->type;
5121     ip->major = dip->major;
5122     ip->minor = dip->minor;
5123     ip->nlink = dip->nlink;
5124     ip->size = dip->size;
5125     memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
5126     brelse(bp);
5127     ip->flags |= I_VALID;
5128     if(ip->type == 0)
5129       panic("ilock: no type");
5130   }
5131 }
5132 
5133 
5134 void
5135 iunlock(struct inode *ip)
5136 {
5137   if(ip == 0 || !(ip->flags & I_BUSY) || ip->ref < 1)
5138     panic("iunlock");
5139 
5140   acquire(&icache.lock);
5141   ip->flags &= ~I_BUSY;
5142   wakeup(ip);
5143   release(&icache.lock);
5144 }
5145 
5146 
5147 
5148 
5149 
5150 
5151 
5152 
5153 
5154 
5155 
5156 
5157 void
5158 iput(struct inode *ip)
5159 {
5160   acquire(&icache.lock);
5161   if(ip->ref == 1 && (ip->flags & I_VALID) && ip->nlink == 0){
5162     
5163     if(ip->flags & I_BUSY)
5164       panic("iput busy");
5165     ip->flags |= I_BUSY;
5166     release(&icache.lock);
5167     itrunc(ip);
5168     ip->type = 0;
5169     iupdate(ip);
5170     acquire(&icache.lock);
5171     ip->flags = 0;
5172     wakeup(ip);
5173   }
5174   ip->ref--;
5175   release(&icache.lock);
5176 }
5177 
5178 
5179 void
5180 iunlockput(struct inode *ip)
5181 {
5182   iunlock(ip);
5183   iput(ip);
5184 }
5185 
5186 
5187 
5188 
5189 
5190 
5191 
5192 
5193 
5194 
5195 
5196 
5197 
5198 
5199 
5200 
5201 
5202 
5203 
5204 
5205 
5206 
5207 
5208 
5209 static uint
5210 bmap(struct inode *ip, uint bn)
5211 {
5212   uint addr, *a;
5213   struct buf *bp;
5214 
5215   if(bn < NDIRECT){
5216     if((addr = ip->addrs[bn]) == 0)
5217       ip->addrs[bn] = addr = balloc(ip->dev);
5218     return addr;
5219   }
5220   bn -= NDIRECT;
5221 
5222   if(bn < NINDIRECT){
5223     
5224     if((addr = ip->addrs[NDIRECT]) == 0)
5225       ip->addrs[NDIRECT] = addr = balloc(ip->dev);
5226     bp = bread(ip->dev, addr);
5227     a = (uint*)bp->data;
5228     if((addr = a[bn]) == 0){
5229       a[bn] = addr = balloc(ip->dev);
5230       log_write(bp);
5231     }
5232     brelse(bp);
5233     return addr;
5234   }
5235 
5236   panic("bmap: out of range");
5237 }
5238 
5239 
5240 
5241 
5242 
5243 
5244 
5245 
5246 
5247 
5248 
5249 
5250 
5251 
5252 
5253 
5254 
5255 static void
5256 itrunc(struct inode *ip)
5257 {
5258   int i, j;
5259   struct buf *bp;
5260   uint *a;
5261 
5262   for(i = 0; i < NDIRECT; i++){
5263     if(ip->addrs[i]){
5264       bfree(ip->dev, ip->addrs[i]);
5265       ip->addrs[i] = 0;
5266     }
5267   }
5268 
5269   if(ip->addrs[NDIRECT]){
5270     bp = bread(ip->dev, ip->addrs[NDIRECT]);
5271     a = (uint*)bp->data;
5272     for(j = 0; j < NINDIRECT; j++){
5273       if(a[j])
5274         bfree(ip->dev, a[j]);
5275     }
5276     brelse(bp);
5277     bfree(ip->dev, ip->addrs[NDIRECT]);
5278     ip->addrs[NDIRECT] = 0;
5279   }
5280 
5281   ip->size = 0;
5282   iupdate(ip);
5283 }
5284 
5285 
5286 void
5287 stati(struct inode *ip, struct stat *st)
5288 {
5289   st->dev = ip->dev;
5290   st->ino = ip->inum;
5291   st->type = ip->type;
5292   st->nlink = ip->nlink;
5293   st->size = ip->size;
5294 }
5295 
5296 
5297 
5298 
5299 
5300 
5301 int
5302 readi(struct inode *ip, char *dst, uint off, uint n)
5303 {
5304   uint tot, m;
5305   struct buf *bp;
5306 
5307   if(ip->type == T_DEV){
5308     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
5309       return -1;
5310     return devsw[ip->major].read(ip, dst, n);
5311   }
5312 
5313   if(off > ip->size || off + n < off)
5314     return -1;
5315   if(off + n > ip->size)
5316     n = ip->size - off;
5317 
5318   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
5319     bp = bread(ip->dev, bmap(ip, off/BSIZE));
5320     m = min(n - tot, BSIZE - off%BSIZE);
5321     memmove(dst, bp->data + off%BSIZE, m);
5322     brelse(bp);
5323   }
5324   return n;
5325 }
5326 
5327 
5328 
5329 
5330 
5331 
5332 
5333 
5334 
5335 
5336 
5337 
5338 
5339 
5340 
5341 
5342 
5343 
5344 
5345 
5346 
5347 
5348 
5349 
5350 
5351 int
5352 writei(struct inode *ip, char *src, uint off, uint n)
5353 {
5354   uint tot, m;
5355   struct buf *bp;
5356 
5357   if(ip->type == T_DEV){
5358     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
5359       return -1;
5360     return devsw[ip->major].write(ip, src, n);
5361   }
5362 
5363   if(off > ip->size || off + n < off)
5364     return -1;
5365   if(off + n > MAXFILE*BSIZE)
5366     return -1;
5367 
5368   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
5369     bp = bread(ip->dev, bmap(ip, off/BSIZE));
5370     m = min(n - tot, BSIZE - off%BSIZE);
5371     memmove(bp->data + off%BSIZE, src, m);
5372     log_write(bp);
5373     brelse(bp);
5374   }
5375 
5376   if(n > 0 && off > ip->size){
5377     ip->size = off;
5378     iupdate(ip);
5379   }
5380   return n;
5381 }
5382 
5383 
5384 
5385 
5386 
5387 
5388 
5389 
5390 
5391 
5392 
5393 
5394 
5395 
5396 
5397 
5398 
5399 
5400 
5401 
5402 int
5403 namecmp(const char *s, const char *t)
5404 {
5405   return strncmp(s, t, DIRSIZ);
5406 }
5407 
5408 
5409 
5410 struct inode*
5411 dirlookup(struct inode *dp, char *name, uint *poff)
5412 {
5413   uint off, inum;
5414   struct dirent de;
5415 
5416   if(dp->type != T_DIR)
5417     panic("dirlookup not DIR");
5418 
5419   for(off = 0; off < dp->size; off += sizeof(de)){
5420     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
5421       panic("dirlink read");
5422     if(de.inum == 0)
5423       continue;
5424     if(namecmp(name, de.name) == 0){
5425       
5426       if(poff)
5427         *poff = off;
5428       inum = de.inum;
5429       return iget(dp->dev, inum);
5430     }
5431   }
5432 
5433   return 0;
5434 }
5435 
5436 
5437 
5438 
5439 
5440 
5441 
5442 
5443 
5444 
5445 
5446 
5447 
5448 
5449 
5450 
5451 int
5452 dirlink(struct inode *dp, char *name, uint inum)
5453 {
5454   int off;
5455   struct dirent de;
5456   struct inode *ip;
5457 
5458   
5459   if((ip = dirlookup(dp, name, 0)) != 0){
5460     iput(ip);
5461     return -1;
5462   }
5463 
5464   
5465   for(off = 0; off < dp->size; off += sizeof(de)){
5466     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
5467       panic("dirlink read");
5468     if(de.inum == 0)
5469       break;
5470   }
5471 
5472   strncpy(de.name, name, DIRSIZ);
5473   de.inum = inum;
5474   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
5475     panic("dirlink");
5476 
5477   return 0;
5478 }
5479 
5480 
5481 
5482 
5483 
5484 
5485 
5486 
5487 
5488 
5489 
5490 
5491 
5492 
5493 
5494 
5495 
5496 
5497 
5498 
5499 
5500 
5501 
5502 
5503 
5504 
5505 
5506 
5507 
5508 
5509 
5510 
5511 
5512 
5513 
5514 static char*
5515 skipelem(char *path, char *name)
5516 {
5517   char *s;
5518   int len;
5519 
5520   while(*path == '/')
5521     path++;
5522   if(*path == 0)
5523     return 0;
5524   s = path;
5525   while(*path != '/' && *path != 0)
5526     path++;
5527   len = path - s;
5528   if(len >= DIRSIZ)
5529     memmove(name, s, DIRSIZ);
5530   else {
5531     memmove(name, s, len);
5532     name[len] = 0;
5533   }
5534   while(*path == '/')
5535     path++;
5536   return path;
5537 }
5538 
5539 
5540 
5541 
5542 
5543 
5544 
5545 
5546 
5547 
5548 
5549 
5550 
5551 
5552 
5553 
5554 static struct inode*
5555 namex(char *path, int nameiparent, char *name)
5556 {
5557   struct inode *ip, *next;
5558 
5559   if(*path == '/')
5560     ip = iget(ROOTDEV, ROOTINO);
5561   else
5562     ip = idup(proc->cwd);
5563 
5564   while((path = skipelem(path, name)) != 0){
5565     ilock(ip);
5566     if(ip->type != T_DIR){
5567       iunlockput(ip);
5568       return 0;
5569     }
5570     if(nameiparent && *path == '\0'){
5571       
5572       iunlock(ip);
5573       return ip;
5574     }
5575     if((next = dirlookup(ip, name, 0)) == 0){
5576       iunlockput(ip);
5577       return 0;
5578     }
5579     iunlockput(ip);
5580     ip = next;
5581   }
5582   if(nameiparent){
5583     iput(ip);
5584     return 0;
5585   }
5586   return ip;
5587 }
5588 
5589 struct inode*
5590 namei(char *path)
5591 {
5592   char name[DIRSIZ];
5593   return namex(path, 0, name);
5594 }
5595 
5596 
5597 
5598 
5599 
5600 struct inode*
5601 nameiparent(char *path, char *name)
5602 {
5603   return namex(path, 1, name);
5604 }
5605 
5606 
5607 
5608 
5609 
5610 
5611 
5612 
5613 
5614 
5615 
5616 
5617 
5618 
5619 
5620 
5621 
5622 
5623 
5624 
5625 
5626 
5627 
5628 
5629 
5630 
5631 
5632 
5633 
5634 
5635 
5636 
5637 
5638 
5639 
5640 
5641 
5642 
5643 
5644 
5645 
5646 
5647 
5648 
5649 
5650 
5651 
5652 
5653 
5654 #include "types.h"
5655 #include "defs.h"
5656 #include "param.h"
5657 #include "fs.h"
5658 #include "file.h"
5659 #include "spinlock.h"
5660 
5661 struct devsw devsw[NDEV];
5662 struct {
5663   struct spinlock lock;
5664   struct file file[NFILE];
5665 } ftable;
5666 
5667 void
5668 fileinit(void)
5669 {
5670   initlock(&ftable.lock, "ftable");
5671 }
5672 
5673 
5674 struct file*
5675 filealloc(void)
5676 {
5677   struct file *f;
5678 
5679   acquire(&ftable.lock);
5680   for(f = ftable.file; f < ftable.file + NFILE; f++){
5681     if(f->ref == 0){
5682       f->ref = 1;
5683       release(&ftable.lock);
5684       return f;
5685     }
5686   }
5687   release(&ftable.lock);
5688   return 0;
5689 }
5690 
5691 
5692 
5693 
5694 
5695 
5696 
5697 
5698 
5699 
5700 
5701 struct file*
5702 filedup(struct file *f)
5703 {
5704   acquire(&ftable.lock);
5705   if(f->ref < 1)
5706     panic("filedup");
5707   f->ref++;
5708   release(&ftable.lock);
5709   return f;
5710 }
5711 
5712 
5713 void
5714 fileclose(struct file *f)
5715 {
5716   struct file ff;
5717 
5718   acquire(&ftable.lock);
5719   if(f->ref < 1)
5720     panic("fileclose");
5721   if(--f->ref > 0){
5722     release(&ftable.lock);
5723     return;
5724   }
5725   ff = *f;
5726   f->ref = 0;
5727   f->type = FD_NONE;
5728   release(&ftable.lock);
5729 
5730   if(ff.type == FD_PIPE)
5731     pipeclose(ff.pipe, ff.writable);
5732   else if(ff.type == FD_INODE){
5733     begin_op();
5734     iput(ff.ip);
5735     end_op();
5736   }
5737 }
5738 
5739 
5740 
5741 
5742 
5743 
5744 
5745 
5746 
5747 
5748 
5749 
5750 
5751 int
5752 filestat(struct file *f, struct stat *st)
5753 {
5754   if(f->type == FD_INODE){
5755     ilock(f->ip);
5756     stati(f->ip, st);
5757     iunlock(f->ip);
5758     return 0;
5759   }
5760   return -1;
5761 }
5762 
5763 
5764 int
5765 fileread(struct file *f, char *addr, int n)
5766 {
5767   int r;
5768 
5769   if(f->readable == 0)
5770     return -1;
5771   if(f->type == FD_PIPE)
5772     return piperead(f->pipe, addr, n);
5773   if(f->type == FD_INODE){
5774     ilock(f->ip);
5775     if((r = readi(f->ip, addr, f->off, n)) > 0)
5776       f->off += r;
5777     iunlock(f->ip);
5778     return r;
5779   }
5780   panic("fileread");
5781 }
5782 
5783 
5784 
5785 
5786 
5787 
5788 
5789 
5790 
5791 
5792 
5793 
5794 
5795 
5796 
5797 
5798 
5799 
5800 
5801 int
5802 filewrite(struct file *f, char *addr, int n)
5803 {
5804   int r;
5805 
5806   if(f->writable == 0)
5807     return -1;
5808   if(f->type == FD_PIPE)
5809     return pipewrite(f->pipe, addr, n);
5810   if(f->type == FD_INODE){
5811     
5812     
5813     
5814     
5815     
5816     
5817     int max = ((LOGSIZE-1-1-2) / 2) * 512;
5818     int i = 0;
5819     while(i < n){
5820       int n1 = n - i;
5821       if(n1 > max)
5822         n1 = max;
5823 
5824       begin_op();
5825       ilock(f->ip);
5826       if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
5827         f->off += r;
5828       iunlock(f->ip);
5829       end_op();
5830 
5831       if(r < 0)
5832         break;
5833       if(r != n1)
5834         panic("short filewrite");
5835       i += r;
5836     }
5837     return i == n ? n : -1;
5838   }
5839   panic("filewrite");
5840 }
5841 
5842 
5843 
5844 
5845 
5846 
5847 
5848 
5849 
5850 
5851 
5852 
5853 
5854 
5855 
5856 #include "types.h"
5857 #include "defs.h"
5858 #include "param.h"
5859 #include "stat.h"
5860 #include "mmu.h"
5861 #include "proc.h"
5862 #include "fs.h"
5863 #include "file.h"
5864 #include "fcntl.h"
5865 
5866 
5867 
5868 static int
5869 argfd(int n, int *pfd, struct file **pf)
5870 {
5871   int fd;
5872   struct file *f;
5873 
5874   if(argint(n, &fd) < 0)
5875     return -1;
5876   if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
5877     return -1;
5878   if(pfd)
5879     *pfd = fd;
5880   if(pf)
5881     *pf = f;
5882   return 0;
5883 }
5884 
5885 
5886 
5887 static int
5888 fdalloc(struct file *f)
5889 {
5890   int fd;
5891 
5892   for(fd = 0; fd < NOFILE; fd++){
5893     if(proc->ofile[fd] == 0){
5894       proc->ofile[fd] = f;
5895       return fd;
5896     }
5897   }
5898   return -1;
5899 }
5900 int
5901 sys_dup(void)
5902 {
5903   struct file *f;
5904   int fd;
5905 
5906   if(argfd(0, 0, &f) < 0)
5907     return -1;
5908   if((fd=fdalloc(f)) < 0)
5909     return -1;
5910   filedup(f);
5911   return fd;
5912 }
5913 
5914 int
5915 sys_read(void)
5916 {
5917   struct file *f;
5918   int n;
5919   char *p;
5920 
5921   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
5922     return -1;
5923   return fileread(f, p, n);
5924 }
5925 
5926 int
5927 sys_write(void)
5928 {
5929   struct file *f;
5930   int n;
5931   char *p;
5932 
5933   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
5934     return -1;
5935   return filewrite(f, p, n);
5936 }
5937 
5938 int
5939 sys_close(void)
5940 {
5941   int fd;
5942   struct file *f;
5943 
5944   if(argfd(0, &fd, &f) < 0)
5945     return -1;
5946   proc->ofile[fd] = 0;
5947   fileclose(f);
5948   return 0;
5949 }
5950 int
5951 sys_fstat(void)
5952 {
5953   struct file *f;
5954   struct stat *st;
5955 
5956   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
5957     return -1;
5958   return filestat(f, st);
5959 }
5960 
5961 
5962 int
5963 sys_link(void)
5964 {
5965   char name[DIRSIZ], *new, *old;
5966   struct inode *dp, *ip;
5967 
5968   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
5969     return -1;
5970 
5971   begin_op();
5972   if((ip = namei(old)) == 0){
5973     end_op();
5974     return -1;
5975   }
5976 
5977   ilock(ip);
5978   if(ip->type == T_DIR){
5979     iunlockput(ip);
5980     end_op();
5981     return -1;
5982   }
5983 
5984   ip->nlink++;
5985   iupdate(ip);
5986   iunlock(ip);
5987 
5988   if((dp = nameiparent(new, name)) == 0)
5989     goto bad;
5990   ilock(dp);
5991   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
5992     iunlockput(dp);
5993     goto bad;
5994   }
5995   iunlockput(dp);
5996   iput(ip);
5997 
5998   end_op();
5999 
6000   return 0;
6001 
6002 bad:
6003   ilock(ip);
6004   ip->nlink--;
6005   iupdate(ip);
6006   iunlockput(ip);
6007   end_op();
6008   return -1;
6009 }
6010 
6011 
6012 static int
6013 isdirempty(struct inode *dp)
6014 {
6015   int off;
6016   struct dirent de;
6017 
6018   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
6019     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
6020       panic("isdirempty: readi");
6021     if(de.inum != 0)
6022       return 0;
6023   }
6024   return 1;
6025 }
6026 
6027 
6028 
6029 
6030 
6031 
6032 
6033 
6034 
6035 
6036 
6037 
6038 
6039 
6040 
6041 
6042 
6043 
6044 
6045 
6046 
6047 
6048 
6049 
6050 int
6051 sys_unlink(void)
6052 {
6053   struct inode *ip, *dp;
6054   struct dirent de;
6055   char name[DIRSIZ], *path;
6056   uint off;
6057 
6058   if(argstr(0, &path) < 0)
6059     return -1;
6060 
6061   begin_op();
6062   if((dp = nameiparent(path, name)) == 0){
6063     end_op();
6064     return -1;
6065   }
6066 
6067   ilock(dp);
6068 
6069   
6070   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
6071     goto bad;
6072 
6073   if((ip = dirlookup(dp, name, &off)) == 0)
6074     goto bad;
6075   ilock(ip);
6076 
6077   if(ip->nlink < 1)
6078     panic("unlink: nlink < 1");
6079   if(ip->type == T_DIR && !isdirempty(ip)){
6080     iunlockput(ip);
6081     goto bad;
6082   }
6083 
6084   memset(&de, 0, sizeof(de));
6085   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
6086     panic("unlink: writei");
6087   if(ip->type == T_DIR){
6088     dp->nlink--;
6089     iupdate(dp);
6090   }
6091   iunlockput(dp);
6092 
6093   ip->nlink--;
6094   iupdate(ip);
6095   iunlockput(ip);
6096 
6097   end_op();
6098 
6099   return 0;
6100 bad:
6101   iunlockput(dp);
6102   end_op();
6103   return -1;
6104 }
6105 
6106 static struct inode*
6107 create(char *path, short type, short major, short minor)
6108 {
6109   uint off;
6110   struct inode *ip, *dp;
6111   char name[DIRSIZ];
6112 
6113   if((dp = nameiparent(path, name)) == 0)
6114     return 0;
6115   ilock(dp);
6116 
6117   if((ip = dirlookup(dp, name, &off)) != 0){
6118     iunlockput(dp);
6119     ilock(ip);
6120     if(type == T_FILE && ip->type == T_FILE)
6121       return ip;
6122     iunlockput(ip);
6123     return 0;
6124   }
6125 
6126   if((ip = ialloc(dp->dev, type)) == 0)
6127     panic("create: ialloc");
6128 
6129   ilock(ip);
6130   ip->major = major;
6131   ip->minor = minor;
6132   ip->nlink = 1;
6133   iupdate(ip);
6134 
6135   if(type == T_DIR){  
6136     dp->nlink++;  
6137     iupdate(dp);
6138     
6139     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
6140       panic("create dots");
6141   }
6142 
6143   if(dirlink(dp, name, ip->inum) < 0)
6144     panic("create: dirlink");
6145 
6146   iunlockput(dp);
6147 
6148   return ip;
6149 }
6150 int
6151 sys_open(void)
6152 {
6153   char *path;
6154   int fd, omode;
6155   struct file *f;
6156   struct inode *ip;
6157 
6158   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
6159     return -1;
6160 
6161   begin_op();
6162 
6163   if(omode & O_CREATE){
6164     ip = create(path, T_FILE, 0, 0);
6165     if(ip == 0){
6166       end_op();
6167       return -1;
6168     }
6169   } else {
6170     if((ip = namei(path)) == 0){
6171       end_op();
6172       return -1;
6173     }
6174     ilock(ip);
6175     if(ip->type == T_DIR && omode != O_RDONLY){
6176       iunlockput(ip);
6177       end_op();
6178       return -1;
6179     }
6180   }
6181 
6182   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
6183     if(f)
6184       fileclose(f);
6185     iunlockput(ip);
6186     end_op();
6187     return -1;
6188   }
6189   iunlock(ip);
6190   end_op();
6191 
6192   f->type = FD_INODE;
6193   f->ip = ip;
6194   f->off = 0;
6195   f->readable = !(omode & O_WRONLY);
6196   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
6197   return fd;
6198 }
6199 
6200 int
6201 sys_mkdir(void)
6202 {
6203   char *path;
6204   struct inode *ip;
6205 
6206   begin_op();
6207   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
6208     end_op();
6209     return -1;
6210   }
6211   iunlockput(ip);
6212   end_op();
6213   return 0;
6214 }
6215 
6216 int
6217 sys_mknod(void)
6218 {
6219   struct inode *ip;
6220   char *path;
6221   int major, minor;
6222 
6223   begin_op();
6224   if((argstr(0, &path)) < 0 ||
6225      argint(1, &major) < 0 ||
6226      argint(2, &minor) < 0 ||
6227      (ip = create(path, T_DEV, major, minor)) == 0){
6228     end_op();
6229     return -1;
6230   }
6231   iunlockput(ip);
6232   end_op();
6233   return 0;
6234 }
6235 
6236 
6237 
6238 
6239 
6240 
6241 
6242 
6243 
6244 
6245 
6246 
6247 
6248 
6249 
6250 int
6251 sys_chdir(void)
6252 {
6253   char *path;
6254   struct inode *ip;
6255 
6256   begin_op();
6257   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
6258     end_op();
6259     return -1;
6260   }
6261   ilock(ip);
6262   if(ip->type != T_DIR){
6263     iunlockput(ip);
6264     end_op();
6265     return -1;
6266   }
6267   iunlock(ip);
6268   iput(proc->cwd);
6269   end_op();
6270   proc->cwd = ip;
6271   return 0;
6272 }
6273 
6274 int
6275 sys_exec(void)
6276 {
6277   char *path, *argv[MAXARG];
6278   int i;
6279   uint uargv, uarg;
6280 
6281   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
6282     return -1;
6283   }
6284   memset(argv, 0, sizeof(argv));
6285   for(i=0;; i++){
6286     if(i >= NELEM(argv))
6287       return -1;
6288     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
6289       return -1;
6290     if(uarg == 0){
6291       argv[i] = 0;
6292       break;
6293     }
6294     if(fetchstr(uarg, &argv[i]) < 0)
6295       return -1;
6296   }
6297   return exec(path, argv);
6298 }
6299 
6300 int
6301 sys_pipe(void)
6302 {
6303   int *fd;
6304   struct file *rf, *wf;
6305   int fd0, fd1;
6306 
6307   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
6308     return -1;
6309   if(pipealloc(&rf, &wf) < 0)
6310     return -1;
6311   fd0 = -1;
6312   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
6313     if(fd0 >= 0)
6314       proc->ofile[fd0] = 0;
6315     fileclose(rf);
6316     fileclose(wf);
6317     return -1;
6318   }
6319   fd[0] = fd0;
6320   fd[1] = fd1;
6321   return 0;
6322 }
6323 
6324 
6325 
6326 
6327 
6328 
6329 
6330 
6331 
6332 
6333 
6334 
6335 
6336 
6337 
6338 
6339 
6340 
6341 
6342 
6343 
6344 
6345 
6346 
6347 
6348 
6349 
6350 #include "types.h"
6351 #include "param.h"
6352 #include "memlayout.h"
6353 #include "mmu.h"
6354 #include "proc.h"
6355 #include "defs.h"
6356 #include "x86.h"
6357 #include "elf.h"
6358 
6359 int
6360 exec(char *path, char **argv)
6361 {
6362   char *s, *last;
6363   int i, off;
6364   uint argc, sz, sp, ustack[3+MAXARG+1];
6365   struct elfhdr elf;
6366   struct inode *ip;
6367   struct proghdr ph;
6368   pde_t *pgdir, *oldpgdir;
6369 
6370   begin_op();
6371   if((ip = namei(path)) == 0){
6372     end_op();
6373     return -1;
6374   }
6375   ilock(ip);
6376   pgdir = 0;
6377 
6378   
6379   if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
6380     goto bad;
6381   if(elf.magic != ELF_MAGIC)
6382     goto bad;
6383 
6384   if((pgdir = setupkvm()) == 0)
6385     goto bad;
6386 
6387   
6388   sz = 0;
6389   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
6390     if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
6391       goto bad;
6392     if(ph.type != ELF_PROG_LOAD)
6393       continue;
6394     if(ph.memsz < ph.filesz)
6395       goto bad;
6396     if(ph.vaddr + ph.memsz < ph.vaddr)
6397       goto bad;
6398     if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
6399       goto bad;
6400     if(ph.vaddr % PGSIZE != 0)
6401       goto bad;
6402     if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
6403       goto bad;
6404   }
6405   iunlockput(ip);
6406   end_op();
6407   ip = 0;
6408 
6409   
6410   
6411   sz = PGROUNDUP(sz);
6412   if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
6413     goto bad;
6414   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
6415   sp = sz;
6416 
6417   
6418   for(argc = 0; argv[argc]; argc++) {
6419     if(argc >= MAXARG)
6420       goto bad;
6421     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
6422     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
6423       goto bad;
6424     ustack[3+argc] = sp;
6425   }
6426   ustack[3+argc] = 0;
6427 
6428   ustack[0] = 0xffffffff;  
6429   ustack[1] = argc;
6430   ustack[2] = sp - (argc+1)*4;  
6431 
6432   sp -= (3+argc+1) * 4;
6433   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
6434     goto bad;
6435 
6436   
6437   for(last=s=path; *s; s++)
6438     if(*s == '/')
6439       last = s+1;
6440   safestrcpy(proc->name, last, sizeof(proc->name));
6441 
6442   
6443   oldpgdir = proc->pgdir;
6444   proc->pgdir = pgdir;
6445   proc->sz = sz;
6446   proc->tf->eip = elf.entry;  
6447   proc->tf->esp = sp;
6448   switchuvm(proc);
6449   freevm(oldpgdir);
6450   return 0;
6451 
6452  bad:
6453   if(pgdir)
6454     freevm(pgdir);
6455   if(ip){
6456     iunlockput(ip);
6457     end_op();
6458   }
6459   return -1;
6460 }
6461 
6462 
6463 
6464 
6465 
6466 
6467 
6468 
6469 
6470 
6471 
6472 
6473 
6474 
6475 
6476 
6477 
6478 
6479 
6480 
6481 
6482 
6483 
6484 
6485 
6486 
6487 
6488 
6489 
6490 
6491 
6492 
6493 
6494 
6495 
6496 
6497 
6498 
6499 
6500 #include "types.h"
6501 #include "defs.h"
6502 #include "param.h"
6503 #include "mmu.h"
6504 #include "proc.h"
6505 #include "fs.h"
6506 #include "file.h"
6507 #include "spinlock.h"
6508 
6509 #define PIPESIZE 512
6510 
6511 struct pipe {
6512   struct spinlock lock;
6513   char data[PIPESIZE];
6514   uint nread;     
6515   uint nwrite;    
6516   int readopen;   
6517   int writeopen;  
6518 };
6519 
6520 int
6521 pipealloc(struct file **f0, struct file **f1)
6522 {
6523   struct pipe *p;
6524 
6525   p = 0;
6526   *f0 = *f1 = 0;
6527   if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
6528     goto bad;
6529   if((p = (struct pipe*)kalloc()) == 0)
6530     goto bad;
6531   p->readopen = 1;
6532   p->writeopen = 1;
6533   p->nwrite = 0;
6534   p->nread = 0;
6535   initlock(&p->lock, "pipe");
6536   (*f0)->type = FD_PIPE;
6537   (*f0)->readable = 1;
6538   (*f0)->writable = 0;
6539   (*f0)->pipe = p;
6540   (*f1)->type = FD_PIPE;
6541   (*f1)->readable = 0;
6542   (*f1)->writable = 1;
6543   (*f1)->pipe = p;
6544   return 0;
6545 
6546 
6547 
6548 
6549 
6550  bad:
6551   if(p)
6552     kfree((char*)p);
6553   if(*f0)
6554     fileclose(*f0);
6555   if(*f1)
6556     fileclose(*f1);
6557   return -1;
6558 }
6559 
6560 void
6561 pipeclose(struct pipe *p, int writable)
6562 {
6563   acquire(&p->lock);
6564   if(writable){
6565     p->writeopen = 0;
6566     wakeup(&p->nread);
6567   } else {
6568     p->readopen = 0;
6569     wakeup(&p->nwrite);
6570   }
6571   if(p->readopen == 0 && p->writeopen == 0){
6572     release(&p->lock);
6573     kfree((char*)p);
6574   } else
6575     release(&p->lock);
6576 }
6577 
6578 
6579 int
6580 pipewrite(struct pipe *p, char *addr, int n)
6581 {
6582   int i;
6583 
6584   acquire(&p->lock);
6585   for(i = 0; i < n; i++){
6586     while(p->nwrite == p->nread + PIPESIZE){  
6587       if(p->readopen == 0 || proc->killed){
6588         release(&p->lock);
6589         return -1;
6590       }
6591       wakeup(&p->nread);
6592       sleep(&p->nwrite, &p->lock);  
6593     }
6594     p->data[p->nwrite++ % PIPESIZE] = addr[i];
6595   }
6596   wakeup(&p->nread);  
6597   release(&p->lock);
6598   return n;
6599 }
6600 int
6601 piperead(struct pipe *p, char *addr, int n)
6602 {
6603   int i;
6604 
6605   acquire(&p->lock);
6606   while(p->nread == p->nwrite && p->writeopen){  
6607     if(proc->killed){
6608       release(&p->lock);
6609       return -1;
6610     }
6611     sleep(&p->nread, &p->lock); 
6612   }
6613   for(i = 0; i < n; i++){  
6614     if(p->nread == p->nwrite)
6615       break;
6616     addr[i] = p->data[p->nread++ % PIPESIZE];
6617   }
6618   wakeup(&p->nwrite);  
6619   release(&p->lock);
6620   return i;
6621 }
6622 
6623 
6624 
6625 
6626 
6627 
6628 
6629 
6630 
6631 
6632 
6633 
6634 
6635 
6636 
6637 
6638 
6639 
6640 
6641 
6642 
6643 
6644 
6645 
6646 
6647 
6648 
6649 
6650 #include "types.h"
6651 #include "x86.h"
6652 
6653 void*
6654 memset(void *dst, int c, uint n)
6655 {
6656   if ((int)dst%4 == 0 && n%4 == 0){
6657     c &= 0xFF;
6658     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
6659   } else
6660     stosb(dst, c, n);
6661   return dst;
6662 }
6663 
6664 int
6665 memcmp(const void *v1, const void *v2, uint n)
6666 {
6667   const uchar *s1, *s2;
6668 
6669   s1 = v1;
6670   s2 = v2;
6671   while(n-- > 0){
6672     if(*s1 != *s2)
6673       return *s1 - *s2;
6674     s1++, s2++;
6675   }
6676 
6677   return 0;
6678 }
6679 
6680 void*
6681 memmove(void *dst, const void *src, uint n)
6682 {
6683   const char *s;
6684   char *d;
6685 
6686   s = src;
6687   d = dst;
6688   if(s < d && s + n > d){
6689     s += n;
6690     d += n;
6691     while(n-- > 0)
6692       *--d = *--s;
6693   } else
6694     while(n-- > 0)
6695       *d++ = *s++;
6696 
6697   return dst;
6698 }
6699 
6700 
6701 void*
6702 memcpy(void *dst, const void *src, uint n)
6703 {
6704   return memmove(dst, src, n);
6705 }
6706 
6707 int
6708 strncmp(const char *p, const char *q, uint n)
6709 {
6710   while(n > 0 && *p && *p == *q)
6711     n--, p++, q++;
6712   if(n == 0)
6713     return 0;
6714   return (uchar)*p - (uchar)*q;
6715 }
6716 
6717 char*
6718 strncpy(char *s, const char *t, int n)
6719 {
6720   char *os;
6721 
6722   os = s;
6723   while(n-- > 0 && (*s++ = *t++) != 0)
6724     ;
6725   while(n-- > 0)
6726     *s++ = 0;
6727   return os;
6728 }
6729 
6730 
6731 char*
6732 safestrcpy(char *s, const char *t, int n)
6733 {
6734   char *os;
6735 
6736   os = s;
6737   if(n <= 0)
6738     return os;
6739   while(--n > 0 && (*s++ = *t++) != 0)
6740     ;
6741   *s = 0;
6742   return os;
6743 }
6744 
6745 
6746 
6747 
6748 
6749 
6750 int
6751 strlen(const char *s)
6752 {
6753   int n;
6754 
6755   for(n = 0; s[n]; n++)
6756     ;
6757   return n;
6758 }
6759 
6760 
6761 
6762 
6763 
6764 
6765 
6766 
6767 
6768 
6769 
6770 
6771 
6772 
6773 
6774 
6775 
6776 
6777 
6778 
6779 
6780 
6781 
6782 
6783 
6784 
6785 
6786 
6787 
6788 
6789 
6790 
6791 
6792 
6793 
6794 
6795 
6796 
6797 
6798 
6799 
6800 
6801 
6802 struct mp {             
6803   uchar signature[4];           
6804   void *physaddr;               
6805   uchar length;                 
6806   uchar specrev;                
6807   uchar checksum;               
6808   uchar type;                   
6809   uchar imcrp;
6810   uchar reserved[3];
6811 };
6812 
6813 struct mpconf {         
6814   uchar signature[4];           
6815   ushort length;                
6816   uchar version;                
6817   uchar checksum;               
6818   uchar product[20];            
6819   uint *oemtable;               
6820   ushort oemlength;             
6821   ushort entry;                 
6822   uint *lapicaddr;              
6823   ushort xlength;               
6824   uchar xchecksum;              
6825   uchar reserved;
6826 };
6827 
6828 struct mpproc {         
6829   uchar type;                   
6830   uchar apicid;                 
6831   uchar version;                
6832   uchar flags;                  
6833     #define MPBOOT 0x02           
6834   uchar signature[4];           
6835   uint feature;                 
6836   uchar reserved[8];
6837 };
6838 
6839 struct mpioapic {       
6840   uchar type;                   
6841   uchar apicno;                 
6842   uchar version;                
6843   uchar flags;                  
6844   uint *addr;                  
6845 };
6846 
6847 
6848 
6849 
6850 
6851 #define MPPROC    0x00  
6852 #define MPBUS     0x01  
6853 #define MPIOAPIC  0x02  
6854 #define MPIOINTR  0x03  
6855 #define MPLINTR   0x04  
6856 
6857 
6858 
6859 
6860 
6861 
6862 
6863 
6864 
6865 
6866 
6867 
6868 
6869 
6870 
6871 
6872 
6873 
6874 
6875 
6876 
6877 
6878 
6879 
6880 
6881 
6882 
6883 
6884 
6885 
6886 
6887 
6888 
6889 
6890 
6891 
6892 
6893 
6894 
6895 
6896 
6897 
6898 
6899 
6900 
6901 
6902 
6903 
6904 
6905 
6906 
6907 
6908 
6909 
6910 
6911 
6912 
6913 
6914 
6915 
6916 
6917 
6918 
6919 
6920 
6921 
6922 
6923 
6924 
6925 
6926 
6927 
6928 
6929 
6930 
6931 
6932 
6933 
6934 
6935 
6936 
6937 
6938 
6939 
6940 
6941 
6942 
6943 
6944 
6945 
6946 
6947 
6948 
6949 
6950 
6951 
6952 
6953 
6954 #include "types.h"
6955 #include "defs.h"
6956 #include "param.h"
6957 #include "memlayout.h"
6958 #include "mp.h"
6959 #include "x86.h"
6960 #include "mmu.h"
6961 #include "proc.h"
6962 
6963 struct cpu cpus[NCPU];
6964 int ismp;
6965 int ncpu;
6966 uchar ioapicid;
6967 
6968 static uchar
6969 sum(uchar *addr, int len)
6970 {
6971   int i, sum;
6972 
6973   sum = 0;
6974   for(i=0; i<len; i++)
6975     sum += addr[i];
6976   return sum;
6977 }
6978 
6979 
6980 static struct mp*
6981 mpsearch1(uint a, int len)
6982 {
6983   uchar *e, *p, *addr;
6984 
6985   addr = P2V(a);
6986   e = addr+len;
6987   for(p = addr; p < e; p += sizeof(struct mp))
6988     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
6989       return (struct mp*)p;
6990   return 0;
6991 }
6992 
6993 
6994 
6995 
6996 
6997 
6998 
6999 
7000 
7001 
7002 
7003 
7004 
7005 static struct mp*
7006 mpsearch(void)
7007 {
7008   uchar *bda;
7009   uint p;
7010   struct mp *mp;
7011 
7012   bda = (uchar *) P2V(0x400);
7013   if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
7014     if((mp = mpsearch1(p, 1024)))
7015       return mp;
7016   } else {
7017     p = ((bda[0x14]<<8)|bda[0x13])*1024;
7018     if((mp = mpsearch1(p-1024, 1024)))
7019       return mp;
7020   }
7021   return mpsearch1(0xF0000, 0x10000);
7022 }
7023 
7024 
7025 
7026 
7027 
7028 
7029 static struct mpconf*
7030 mpconfig(struct mp **pmp)
7031 {
7032   struct mpconf *conf;
7033   struct mp *mp;
7034 
7035   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
7036     return 0;
7037   conf = (struct mpconf*) P2V((uint) mp->physaddr);
7038   if(memcmp(conf, "PCMP", 4) != 0)
7039     return 0;
7040   if(conf->version != 1 && conf->version != 4)
7041     return 0;
7042   if(sum((uchar*)conf, conf->length) != 0)
7043     return 0;
7044   *pmp = mp;
7045   return conf;
7046 }
7047 
7048 
7049 
7050 void
7051 mpinit(void)
7052 {
7053   uchar *p, *e;
7054   struct mp *mp;
7055   struct mpconf *conf;
7056   struct mpproc *proc;
7057   struct mpioapic *ioapic;
7058 
7059   if((conf = mpconfig(&mp)) == 0)
7060     return;
7061   ismp = 1;
7062   lapic = (uint*)conf->lapicaddr;
7063   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
7064     switch(*p){
7065     case MPPROC:
7066       proc = (struct mpproc*)p;
7067       if(ncpu < NCPU) {
7068         cpus[ncpu].apicid = proc->apicid;  
7069         ncpu++;
7070       }
7071       p += sizeof(struct mpproc);
7072       continue;
7073     case MPIOAPIC:
7074       ioapic = (struct mpioapic*)p;
7075       ioapicid = ioapic->apicno;
7076       p += sizeof(struct mpioapic);
7077       continue;
7078     case MPBUS:
7079     case MPIOINTR:
7080     case MPLINTR:
7081       p += 8;
7082       continue;
7083     default:
7084       ismp = 0;
7085       break;
7086     }
7087   }
7088   if(!ismp){
7089     
7090     ncpu = 1;
7091     lapic = 0;
7092     ioapicid = 0;
7093     return;
7094   }
7095 
7096 
7097 
7098 
7099 
7100   if(mp->imcrp){
7101     
7102     
7103     outb(0x22, 0x70);   
7104     outb(0x23, inb(0x23) | 1);  
7105   }
7106 }
7107 
7108 
7109 
7110 
7111 
7112 
7113 
7114 
7115 
7116 
7117 
7118 
7119 
7120 
7121 
7122 
7123 
7124 
7125 
7126 
7127 
7128 
7129 
7130 
7131 
7132 
7133 
7134 
7135 
7136 
7137 
7138 
7139 
7140 
7141 
7142 
7143 
7144 
7145 
7146 
7147 
7148 
7149 
7150 
7151 
7152 
7153 #include "param.h"
7154 #include "types.h"
7155 #include "defs.h"
7156 #include "date.h"
7157 #include "memlayout.h"
7158 #include "traps.h"
7159 #include "mmu.h"
7160 #include "x86.h"
7161 #include "proc.h"  
7162 
7163 
7164 #define ID      (0x0020/4)   
7165 #define VER     (0x0030/4)   
7166 #define TPR     (0x0080/4)   
7167 #define EOI     (0x00B0/4)   
7168 #define SVR     (0x00F0/4)   
7169   #define ENABLE     0x00000100   
7170 #define ESR     (0x0280/4)   
7171 #define ICRLO   (0x0300/4)   
7172   #define INIT       0x00000500   
7173   #define STARTUP    0x00000600   
7174   #define DELIVS     0x00001000   
7175   #define ASSERT     0x00004000   
7176   #define DEASSERT   0x00000000
7177   #define LEVEL      0x00008000   
7178   #define BCAST      0x00080000   
7179   #define BUSY       0x00001000
7180   #define FIXED      0x00000000
7181 #define ICRHI   (0x0310/4)   
7182 #define TIMER   (0x0320/4)   
7183   #define X1         0x0000000B   
7184   #define PERIODIC   0x00020000   
7185 #define PCINT   (0x0340/4)   
7186 #define LINT0   (0x0350/4)   
7187 #define LINT1   (0x0360/4)   
7188 #define ERROR   (0x0370/4)   
7189   #define MASKED     0x00010000   
7190 #define TICR    (0x0380/4)   
7191 #define TCCR    (0x0390/4)   
7192 #define TDCR    (0x03E0/4)   
7193 
7194 volatile uint *lapic;  
7195 
7196 
7197 
7198 
7199 
7200 static void
7201 lapicw(int index, int value)
7202 {
7203   lapic[index] = value;
7204   lapic[ID];  
7205 }
7206 
7207 
7208 
7209 
7210 
7211 
7212 
7213 
7214 
7215 
7216 
7217 
7218 
7219 
7220 
7221 
7222 
7223 
7224 
7225 
7226 
7227 
7228 
7229 
7230 
7231 
7232 
7233 
7234 
7235 
7236 
7237 
7238 
7239 
7240 
7241 
7242 
7243 
7244 
7245 
7246 
7247 
7248 
7249 
7250 void
7251 lapicinit(void)
7252 {
7253   if(!lapic)
7254     return;
7255 
7256   
7257   lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
7258 
7259   
7260   
7261   
7262   
7263   lapicw(TDCR, X1);
7264   lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
7265   lapicw(TICR, 10000000);
7266 
7267   
7268   lapicw(LINT0, MASKED);
7269   lapicw(LINT1, MASKED);
7270 
7271   
7272   
7273   if(((lapic[VER]>>16) & 0xFF) >= 4)
7274     lapicw(PCINT, MASKED);
7275 
7276   
7277   lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
7278 
7279   
7280   lapicw(ESR, 0);
7281   lapicw(ESR, 0);
7282 
7283   
7284   lapicw(EOI, 0);
7285 
7286   
7287   lapicw(ICRHI, 0);
7288   lapicw(ICRLO, BCAST | INIT | LEVEL);
7289   while(lapic[ICRLO] & DELIVS)
7290     ;
7291 
7292   
7293   lapicw(TPR, 0);
7294 }
7295 
7296 
7297 
7298 
7299 
7300 int
7301 cpunum(void)
7302 {
7303   int apicid, i;
7304 
7305   
7306   
7307   
7308   
7309   
7310   if(readeflags()&FL_IF){
7311     static int n;
7312     if(n++ == 0)
7313       cprintf("cpu called from %x with interrupts enabled\n",
7314         __builtin_return_address(0));
7315   }
7316 
7317   if (!lapic)
7318     return 0;
7319 
7320   apicid = lapic[ID] >> 24;
7321   for (i = 0; i < ncpu; ++i) {
7322     if (cpus[i].apicid == apicid)
7323       return i;
7324   }
7325   panic("unknown apicid\n");
7326 }
7327 
7328 
7329 void
7330 lapiceoi(void)
7331 {
7332   if(lapic)
7333     lapicw(EOI, 0);
7334 }
7335 
7336 
7337 
7338 void
7339 microdelay(int us)
7340 {
7341 }
7342 
7343 
7344 
7345 
7346 
7347 
7348 
7349 
7350 #define CMOS_PORT    0x70
7351 #define CMOS_RETURN  0x71
7352 
7353 
7354 
7355 void
7356 lapicstartap(uchar apicid, uint addr)
7357 {
7358   int i;
7359   ushort *wrv;
7360 
7361   
7362   
7363   
7364   outb(CMOS_PORT, 0xF);  
7365   outb(CMOS_PORT+1, 0x0A);
7366   wrv = (ushort*)P2V((0x40<<4 | 0x67));  
7367   wrv[0] = 0;
7368   wrv[1] = addr >> 4;
7369 
7370   
7371   
7372   lapicw(ICRHI, apicid<<24);
7373   lapicw(ICRLO, INIT | LEVEL | ASSERT);
7374   microdelay(200);
7375   lapicw(ICRLO, INIT | LEVEL);
7376   microdelay(100);    
7377 
7378   
7379   
7380   
7381   
7382   
7383   for(i = 0; i < 2; i++){
7384     lapicw(ICRHI, apicid<<24);
7385     lapicw(ICRLO, STARTUP | (addr>>12));
7386     microdelay(200);
7387   }
7388 }
7389 
7390 
7391 
7392 
7393 
7394 
7395 
7396 
7397 
7398 
7399 
7400 #define CMOS_STATA   0x0a
7401 #define CMOS_STATB   0x0b
7402 #define CMOS_UIP    (1 << 7)        
7403 
7404 #define SECS    0x00
7405 #define MINS    0x02
7406 #define HOURS   0x04
7407 #define DAY     0x07
7408 #define MONTH   0x08
7409 #define YEAR    0x09
7410 
7411 static uint cmos_read(uint reg)
7412 {
7413   outb(CMOS_PORT,  reg);
7414   microdelay(200);
7415 
7416   return inb(CMOS_RETURN);
7417 }
7418 
7419 static void fill_rtcdate(struct rtcdate *r)
7420 {
7421   r->second = cmos_read(SECS);
7422   r->minute = cmos_read(MINS);
7423   r->hour   = cmos_read(HOURS);
7424   r->day    = cmos_read(DAY);
7425   r->month  = cmos_read(MONTH);
7426   r->year   = cmos_read(YEAR);
7427 }
7428 
7429 
7430 void cmostime(struct rtcdate *r)
7431 {
7432   struct rtcdate t1, t2;
7433   int sb, bcd;
7434 
7435   sb = cmos_read(CMOS_STATB);
7436 
7437   bcd = (sb & (1 << 2)) == 0;
7438 
7439   
7440   for(;;) {
7441     fill_rtcdate(&t1);
7442     if(cmos_read(CMOS_STATA) & CMOS_UIP)
7443         continue;
7444     fill_rtcdate(&t2);
7445     if(memcmp(&t1, &t2, sizeof(t1)) == 0)
7446       break;
7447   }
7448 
7449 
7450   
7451   if(bcd) {
7452 #define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
7453     CONV(second);
7454     CONV(minute);
7455     CONV(hour  );
7456     CONV(day   );
7457     CONV(month );
7458     CONV(year  );
7459 #undef     CONV
7460   }
7461 
7462   *r = t1;
7463   r->year += 2000;
7464 }
7465 
7466 
7467 
7468 
7469 
7470 
7471 
7472 
7473 
7474 
7475 
7476 
7477 
7478 
7479 
7480 
7481 
7482 
7483 
7484 
7485 
7486 
7487 
7488 
7489 
7490 
7491 
7492 
7493 
7494 
7495 
7496 
7497 
7498 
7499 
7500 
7501 
7502 
7503 
7504 #include "types.h"
7505 #include "defs.h"
7506 #include "traps.h"
7507 
7508 #define IOAPIC  0xFEC00000   
7509 
7510 #define REG_ID     0x00  
7511 #define REG_VER    0x01  
7512 #define REG_TABLE  0x10  
7513 
7514 
7515 
7516 
7517 
7518 
7519 #define INT_DISABLED   0x00010000  
7520 #define INT_LEVEL      0x00008000  
7521 #define INT_ACTIVELOW  0x00002000  
7522 #define INT_LOGICAL    0x00000800  
7523 
7524 volatile struct ioapic *ioapic;
7525 
7526 
7527 struct ioapic {
7528   uint reg;
7529   uint pad[3];
7530   uint data;
7531 };
7532 
7533 static uint
7534 ioapicread(int reg)
7535 {
7536   ioapic->reg = reg;
7537   return ioapic->data;
7538 }
7539 
7540 static void
7541 ioapicwrite(int reg, uint data)
7542 {
7543   ioapic->reg = reg;
7544   ioapic->data = data;
7545 }
7546 
7547 
7548 
7549 
7550 void
7551 ioapicinit(void)
7552 {
7553   int i, id, maxintr;
7554 
7555   if(!ismp)
7556     return;
7557 
7558   ioapic = (volatile struct ioapic*)IOAPIC;
7559   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
7560   id = ioapicread(REG_ID) >> 24;
7561   if(id != ioapicid)
7562     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
7563 
7564   
7565   
7566   for(i = 0; i <= maxintr; i++){
7567     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
7568     ioapicwrite(REG_TABLE+2*i+1, 0);
7569   }
7570 }
7571 
7572 void
7573 ioapicenable(int irq, int cpunum)
7574 {
7575   if(!ismp)
7576     return;
7577 
7578   
7579   
7580   
7581   ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
7582   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
7583 }
7584 
7585 
7586 
7587 
7588 
7589 
7590 
7591 
7592 
7593 
7594 
7595 
7596 
7597 
7598 
7599 
7600 
7601 
7602 #include "types.h"
7603 #include "x86.h"
7604 #include "traps.h"
7605 
7606 
7607 #define IO_PIC1         0x20    
7608 #define IO_PIC2         0xA0    
7609 
7610 #define IRQ_SLAVE       2       
7611 
7612 
7613 
7614 static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);
7615 
7616 static void
7617 picsetmask(ushort mask)
7618 {
7619   irqmask = mask;
7620   outb(IO_PIC1+1, mask);
7621   outb(IO_PIC2+1, mask >> 8);
7622 }
7623 
7624 void
7625 picenable(int irq)
7626 {
7627   picsetmask(irqmask & ~(1<<irq));
7628 }
7629 
7630 
7631 void
7632 picinit(void)
7633 {
7634   
7635   outb(IO_PIC1+1, 0xFF);
7636   outb(IO_PIC2+1, 0xFF);
7637 
7638   
7639 
7640   
7641   
7642   
7643   
7644   outb(IO_PIC1, 0x11);
7645 
7646   
7647   outb(IO_PIC1+1, T_IRQ0);
7648 
7649 
7650   
7651   
7652   outb(IO_PIC1+1, 1<<IRQ_SLAVE);
7653 
7654   
7655   
7656   
7657   
7658   
7659   
7660   
7661   
7662   outb(IO_PIC1+1, 0x3);
7663 
7664   
7665   outb(IO_PIC2, 0x11);                  
7666   outb(IO_PIC2+1, T_IRQ0 + 8);      
7667   outb(IO_PIC2+1, IRQ_SLAVE);           
7668   
7669   
7670   outb(IO_PIC2+1, 0x3);                 
7671 
7672   
7673   
7674   
7675   
7676   outb(IO_PIC1, 0x68);             
7677   outb(IO_PIC1, 0x0a);             
7678 
7679   outb(IO_PIC2, 0x68);             
7680   outb(IO_PIC2, 0x0a);             
7681 
7682   if(irqmask != 0xFFFF)
7683     picsetmask(irqmask);
7684 }
7685 
7686 
7687 
7688 
7689 
7690 
7691 
7692 
7693 
7694 
7695 
7696 
7697 
7698 
7699 
7700 
7701 
7702 
7703 
7704 
7705 
7706 
7707 
7708 
7709 
7710 
7711 
7712 
7713 
7714 
7715 
7716 
7717 
7718 
7719 
7720 
7721 
7722 
7723 
7724 
7725 
7726 
7727 
7728 
7729 
7730 
7731 
7732 
7733 
7734 
7735 
7736 
7737 
7738 
7739 
7740 
7741 
7742 
7743 
7744 
7745 
7746 
7747 
7748 
7749 
7750 
7751 
7752 #define KBSTATP         0x64    
7753 #define KBS_DIB         0x01    
7754 #define KBDATAP         0x60    
7755 
7756 #define NO              0
7757 
7758 #define SHIFT           (1<<0)
7759 #define CTL             (1<<1)
7760 #define ALT             (1<<2)
7761 
7762 #define CAPSLOCK        (1<<3)
7763 #define NUMLOCK         (1<<4)
7764 #define SCROLLLOCK      (1<<5)
7765 
7766 #define E0ESC           (1<<6)
7767 
7768 
7769 #define KEY_HOME        0xE0
7770 #define KEY_END         0xE1
7771 #define KEY_UP          0xE2
7772 #define KEY_DN          0xE3
7773 #define KEY_LF          0xE4
7774 #define KEY_RT          0xE5
7775 #define KEY_PGUP        0xE6
7776 #define KEY_PGDN        0xE7
7777 #define KEY_INS         0xE8
7778 #define KEY_DEL         0xE9
7779 
7780 
7781 #define C(x) (x - '@')
7782 
7783 static uchar shiftcode[256] =
7784 {
7785   [0x1D] CTL,
7786   [0x2A] SHIFT,
7787   [0x36] SHIFT,
7788   [0x38] ALT,
7789   [0x9D] CTL,
7790   [0xB8] ALT
7791 };
7792 
7793 static uchar togglecode[256] =
7794 {
7795   [0x3A] CAPSLOCK,
7796   [0x45] NUMLOCK,
7797   [0x46] SCROLLLOCK
7798 };
7799 
7800 static uchar normalmap[256] =
7801 {
7802   NO,   0x1B, '1',  '2',  '3',  '4',  '5',  '6',  
7803   '7',  '8',  '9',  '0',  '-',  '=',  '\b', '\t',
7804   'q',  'w',  'e',  'r',  't',  'y',  'u',  'i',  
7805   'o',  'p',  '[',  ']',  '\n', NO,   'a',  's',
7806   'd',  'f',  'g',  'h',  'j',  'k',  'l',  ';',  
7807   '\'', '`',  NO,   '\\', 'z',  'x',  'c',  'v',
7808   'b',  'n',  'm',  ',',  '.',  '/',  NO,   '*',  
7809   NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
7810   NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  
7811   '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
7812   '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   
7813   [0x9C] '\n',      
7814   [0xB5] '/',       
7815   [0xC8] KEY_UP,    [0xD0] KEY_DN,
7816   [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
7817   [0xCB] KEY_LF,    [0xCD] KEY_RT,
7818   [0x97] KEY_HOME,  [0xCF] KEY_END,
7819   [0xD2] KEY_INS,   [0xD3] KEY_DEL
7820 };
7821 
7822 static uchar shiftmap[256] =
7823 {
7824   NO,   033,  '!',  '@',  '#',  '$',  '%',  '^',  
7825   '&',  '*',  '(',  ')',  '_',  '+',  '\b', '\t',
7826   'Q',  'W',  'E',  'R',  'T',  'Y',  'U',  'I',  
7827   'O',  'P',  '{',  '}',  '\n', NO,   'A',  'S',
7828   'D',  'F',  'G',  'H',  'J',  'K',  'L',  ':',  
7829   '"',  '~',  NO,   '|',  'Z',  'X',  'C',  'V',
7830   'B',  'N',  'M',  '<',  '>',  '?',  NO,   '*',  
7831   NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
7832   NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  
7833   '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
7834   '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   
7835   [0x9C] '\n',      
7836   [0xB5] '/',       
7837   [0xC8] KEY_UP,    [0xD0] KEY_DN,
7838   [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
7839   [0xCB] KEY_LF,    [0xCD] KEY_RT,
7840   [0x97] KEY_HOME,  [0xCF] KEY_END,
7841   [0xD2] KEY_INS,   [0xD3] KEY_DEL
7842 };
7843 
7844 
7845 
7846 
7847 
7848 
7849 
7850 static uchar ctlmap[256] =
7851 {
7852   NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
7853   NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
7854   C('Q'),  C('W'),  C('E'),  C('R'),  C('T'),  C('Y'),  C('U'),  C('I'),
7855   C('O'),  C('P'),  NO,      NO,      '\r',    NO,      C('A'),  C('S'),
7856   C('D'),  C('F'),  C('G'),  C('H'),  C('J'),  C('K'),  C('L'),  NO,
7857   NO,      NO,      NO,      C('\\'), C('Z'),  C('X'),  C('C'),  C('V'),
7858   C('B'),  C('N'),  C('M'),  NO,      NO,      C('/'),  NO,      NO,
7859   [0x9C] '\r',      
7860   [0xB5] C('/'),    
7861   [0xC8] KEY_UP,    [0xD0] KEY_DN,
7862   [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
7863   [0xCB] KEY_LF,    [0xCD] KEY_RT,
7864   [0x97] KEY_HOME,  [0xCF] KEY_END,
7865   [0xD2] KEY_INS,   [0xD3] KEY_DEL
7866 };
7867 
7868 
7869 
7870 
7871 
7872 
7873 
7874 
7875 
7876 
7877 
7878 
7879 
7880 
7881 
7882 
7883 
7884 
7885 
7886 
7887 
7888 
7889 
7890 
7891 
7892 
7893 
7894 
7895 
7896 
7897 
7898 
7899 
7900 #include "types.h"
7901 #include "x86.h"
7902 #include "defs.h"
7903 #include "kbd.h"
7904 
7905 int
7906 kbdgetc(void)
7907 {
7908   static uint shift;
7909   static uchar *charcode[4] = {
7910     normalmap, shiftmap, ctlmap, ctlmap
7911   };
7912   uint st, data, c;
7913 
7914   st = inb(KBSTATP);
7915   if((st & KBS_DIB) == 0)
7916     return -1;
7917   data = inb(KBDATAP);
7918 
7919   if(data == 0xE0){
7920     shift |= E0ESC;
7921     return 0;
7922   } else if(data & 0x80){
7923     
7924     data = (shift & E0ESC ? data : data & 0x7F);
7925     shift &= ~(shiftcode[data] | E0ESC);
7926     return 0;
7927   } else if(shift & E0ESC){
7928     
7929     data |= 0x80;
7930     shift &= ~E0ESC;
7931   }
7932 
7933   shift |= shiftcode[data];
7934   shift ^= togglecode[data];
7935   c = charcode[shift & (CTL | SHIFT)][data];
7936   if(shift & CAPSLOCK){
7937     if('a' <= c && c <= 'z')
7938       c += 'A' - 'a';
7939     else if('A' <= c && c <= 'Z')
7940       c += 'a' - 'A';
7941   }
7942   return c;
7943 }
7944 
7945 void
7946 kbdintr(void)
7947 {
7948   consoleintr(kbdgetc);
7949 }
7950 
7951 
7952 
7953 
7954 #include "types.h"
7955 #include "defs.h"
7956 #include "param.h"
7957 #include "traps.h"
7958 #include "spinlock.h"
7959 #include "fs.h"
7960 #include "file.h"
7961 #include "memlayout.h"
7962 #include "mmu.h"
7963 #include "proc.h"
7964 #include "x86.h"
7965 
7966 static void consputc(int);
7967 
7968 static int panicked = 0;
7969 
7970 static struct {
7971   struct spinlock lock;
7972   int locking;
7973 } cons;
7974 
7975 static void
7976 printint(int xx, int base, int sign)
7977 {
7978   static char digits[] = "0123456789abcdef";
7979   char buf[16];
7980   int i;
7981   uint x;
7982 
7983   if(sign && (sign = xx < 0))
7984     x = -xx;
7985   else
7986     x = xx;
7987 
7988   i = 0;
7989   do{
7990     buf[i++] = digits[x % base];
7991   }while((x /= base) != 0);
7992 
7993   if(sign)
7994     buf[i++] = '-';
7995 
7996   while(--i >= 0)
7997     consputc(buf[i]);
7998 }
7999 
8000 
8001 void
8002 cprintf(char *fmt, ...)
8003 {
8004   int i, c, locking;
8005   uint *argp;
8006   char *s;
8007 
8008   locking = cons.locking;
8009   if(locking)
8010     acquire(&cons.lock);
8011 
8012   if (fmt == 0)
8013     panic("null fmt");
8014 
8015   argp = (uint*)(void*)(&fmt + 1);
8016   for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
8017     if(c != '%'){
8018       consputc(c);
8019       continue;
8020     }
8021     c = fmt[++i] & 0xff;
8022     if(c == 0)
8023       break;
8024     switch(c){
8025     case 'd':
8026       printint(*argp++, 10, 1);
8027       break;
8028     case 'x':
8029     case 'p':
8030       printint(*argp++, 16, 0);
8031       break;
8032     case 's':
8033       if((s = (char*)*argp++) == 0)
8034         s = "(null)";
8035       for(; *s; s++)
8036         consputc(*s);
8037       break;
8038     case '%':
8039       consputc('%');
8040       break;
8041     default:
8042       
8043       consputc('%');
8044       consputc(c);
8045       break;
8046     }
8047   }
8048 
8049 
8050   if(locking)
8051     release(&cons.lock);
8052 }
8053 
8054 void
8055 panic(char *s)
8056 {
8057   int i;
8058   uint pcs[10];
8059 
8060   cli();
8061   cons.locking = 0;
8062   cprintf("cpu with apicid %d: panic: ", cpu->apicid);
8063   cprintf(s);
8064   cprintf("\n");
8065   getcallerpcs(&s, pcs);
8066   for(i=0; i<10; i++)
8067     cprintf(" %p", pcs[i]);
8068   panicked = 1; 
8069   for(;;)
8070     ;
8071 }
8072 
8073 
8074 
8075 
8076 
8077 
8078 
8079 
8080 
8081 
8082 
8083 
8084 
8085 
8086 
8087 
8088 
8089 
8090 
8091 
8092 
8093 
8094 
8095 
8096 
8097 
8098 
8099 
8100 #define BACKSPACE 0x100
8101 #define CRTPORT 0x3d4
8102 static ushort *crt = (ushort*)P2V(0xb8000);  
8103 
8104 static void
8105 cgaputc(int c)
8106 {
8107   int pos;
8108 
8109   
8110   outb(CRTPORT, 14);
8111   pos = inb(CRTPORT+1) << 8;
8112   outb(CRTPORT, 15);
8113   pos |= inb(CRTPORT+1);
8114 
8115   if(c == '\n')
8116     pos += 80 - pos%80;
8117   else if(c == BACKSPACE){
8118     if(pos > 0) --pos;
8119   } else
8120     crt[pos++] = (c&0xff) | 0x0700;  
8121 
8122   if(pos < 0 || pos > 25*80)
8123     panic("pos under/overflow");
8124 
8125   if((pos/80) >= 24){  
8126     memmove(crt, crt+80, sizeof(crt[0])*23*80);
8127     pos -= 80;
8128     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
8129   }
8130 
8131   outb(CRTPORT, 14);
8132   outb(CRTPORT+1, pos>>8);
8133   outb(CRTPORT, 15);
8134   outb(CRTPORT+1, pos);
8135   crt[pos] = ' ' | 0x0700;
8136 }
8137 
8138 
8139 
8140 
8141 
8142 
8143 
8144 
8145 
8146 
8147 
8148 
8149 
8150 void
8151 consputc(int c)
8152 {
8153   if(panicked){
8154     cli();
8155     for(;;)
8156       ;
8157   }
8158 
8159   if(c == BACKSPACE){
8160     uartputc('\b'); uartputc(' '); uartputc('\b');
8161   } else
8162     uartputc(c);
8163   cgaputc(c);
8164 }
8165 
8166 #define INPUT_BUF 128
8167 struct {
8168   char buf[INPUT_BUF];
8169   uint r;  
8170   uint w;  
8171   uint e;  
8172 } input;
8173 
8174 #define C(x)  ((x)-'@')  
8175 
8176 void
8177 consoleintr(int (*getc)(void))
8178 {
8179   int c, doprocdump = 0;
8180 
8181   acquire(&cons.lock);
8182   while((c = getc()) >= 0){
8183     switch(c){
8184     case C('P'):  
8185       
8186       doprocdump = 1;
8187       break;
8188     case C('U'):  
8189       while(input.e != input.w &&
8190             input.buf[(input.e-1) % INPUT_BUF] != '\n'){
8191         input.e--;
8192         consputc(BACKSPACE);
8193       }
8194       break;
8195     case C('H'): case '\x7f':  
8196       if(input.e != input.w){
8197         input.e--;
8198         consputc(BACKSPACE);
8199       }
8200       break;
8201     default:
8202       if(c != 0 && input.e-input.r < INPUT_BUF){
8203         c = (c == '\r') ? '\n' : c;
8204         input.buf[input.e++ % INPUT_BUF] = c;
8205         consputc(c);
8206         if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
8207           input.w = input.e;
8208           wakeup(&input.r);
8209         }
8210       }
8211       break;
8212     }
8213   }
8214   release(&cons.lock);
8215   if(doprocdump) {
8216     procdump();  
8217   }
8218 }
8219 
8220 int
8221 consoleread(struct inode *ip, char *dst, int n)
8222 {
8223   uint target;
8224   int c;
8225 
8226   iunlock(ip);
8227   target = n;
8228   acquire(&cons.lock);
8229   while(n > 0){
8230     while(input.r == input.w){
8231       if(proc->killed){
8232         release(&cons.lock);
8233         ilock(ip);
8234         return -1;
8235       }
8236       sleep(&input.r, &cons.lock);
8237     }
8238     c = input.buf[input.r++ % INPUT_BUF];
8239     if(c == C('D')){  
8240       if(n < target){
8241         
8242         
8243         input.r--;
8244       }
8245       break;
8246     }
8247     *dst++ = c;
8248     --n;
8249     if(c == '\n')
8250       break;
8251   }
8252   release(&cons.lock);
8253   ilock(ip);
8254 
8255   return target - n;
8256 }
8257 
8258 int
8259 consolewrite(struct inode *ip, char *buf, int n)
8260 {
8261   int i;
8262 
8263   iunlock(ip);
8264   acquire(&cons.lock);
8265   for(i = 0; i < n; i++)
8266     consputc(buf[i] & 0xff);
8267   release(&cons.lock);
8268   ilock(ip);
8269 
8270   return n;
8271 }
8272 
8273 void
8274 consoleinit(void)
8275 {
8276   initlock(&cons.lock, "console");
8277 
8278   devsw[CONSOLE].write = consolewrite;
8279   devsw[CONSOLE].read = consoleread;
8280   cons.locking = 1;
8281 
8282   picenable(IRQ_KBD);
8283   ioapicenable(IRQ_KBD, 0);
8284 }
8285 
8286 
8287 
8288 
8289 
8290 
8291 
8292 
8293 
8294 
8295 
8296 
8297 
8298 
8299 
8300 
8301 
8302 
8303 
8304 #include "types.h"
8305 #include "defs.h"
8306 #include "traps.h"
8307 #include "x86.h"
8308 
8309 #define IO_TIMER1       0x040           
8310 
8311 
8312 
8313 
8314 
8315 #define TIMER_FREQ      1193182
8316 #define TIMER_DIV(x)    ((TIMER_FREQ+(x)/2)/(x))
8317 
8318 #define TIMER_MODE      (IO_TIMER1 + 3) 
8319 #define TIMER_SEL0      0x00    
8320 #define TIMER_RATEGEN   0x04    
8321 #define TIMER_16BIT     0x30    
8322 
8323 void
8324 timerinit(void)
8325 {
8326   
8327   outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
8328   outb(IO_TIMER1, TIMER_DIV(100) % 256);
8329   outb(IO_TIMER1, TIMER_DIV(100) / 256);
8330   picenable(IRQ_TIMER);
8331 }
8332 
8333 
8334 
8335 
8336 
8337 
8338 
8339 
8340 
8341 
8342 
8343 
8344 
8345 
8346 
8347 
8348 
8349 
8350 
8351 
8352 #include "types.h"
8353 #include "defs.h"
8354 #include "param.h"
8355 #include "traps.h"
8356 #include "spinlock.h"
8357 #include "fs.h"
8358 #include "file.h"
8359 #include "mmu.h"
8360 #include "proc.h"
8361 #include "x86.h"
8362 
8363 #define COM1    0x3f8
8364 
8365 static int uart;    
8366 
8367 void
8368 uartinit(void)
8369 {
8370   char *p;
8371 
8372   
8373   outb(COM1+2, 0);
8374 
8375   
8376   outb(COM1+3, 0x80);    
8377   outb(COM1+0, 115200/9600);
8378   outb(COM1+1, 0);
8379   outb(COM1+3, 0x03);    
8380   outb(COM1+4, 0);
8381   outb(COM1+1, 0x01);    
8382 
8383   
8384   if(inb(COM1+5) == 0xFF)
8385     return;
8386   uart = 1;
8387 
8388   
8389   
8390   inb(COM1+2);
8391   inb(COM1+0);
8392   picenable(IRQ_COM1);
8393   ioapicenable(IRQ_COM1, 0);
8394 
8395   
8396   for(p="xv6...\n"; *p; p++)
8397     uartputc(*p);
8398 }
8399 
8400 void
8401 uartputc(int c)
8402 {
8403   int i;
8404 
8405   if(!uart)
8406     return;
8407   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
8408     microdelay(10);
8409   outb(COM1+0, c);
8410 }
8411 
8412 static int
8413 uartgetc(void)
8414 {
8415   if(!uart)
8416     return -1;
8417   if(!(inb(COM1+5) & 0x01))
8418     return -1;
8419   return inb(COM1+0);
8420 }
8421 
8422 void
8423 uartintr(void)
8424 {
8425   consoleintr(uartgetc);
8426 }
8427 
8428 
8429 
8430 
8431 
8432 
8433 
8434 
8435 
8436 
8437 
8438 
8439 
8440 
8441 
8442 
8443 
8444 
8445 
8446 
8447 
8448 
8449 
8450 
8451 
8452 
8453 
8454 
8455 
8456 
8457 
8458 .globl start
8459 start:
8460   pushl $argv
8461   pushl $init
8462   pushl $0  
8463   movl $SYS_exec, %eax
8464   int $T_SYSCALL
8465 
8466 
8467 exit:
8468   movl $SYS_exit, %eax
8469   int $T_SYSCALL
8470   jmp exit
8471 
8472 
8473 init:
8474   .string "/init\0"
8475 
8476 
8477 .p2align 2
8478 argv:
8479   .long init
8480   .long 0
8481 
8482 
8483 
8484 
8485 
8486 
8487 
8488 
8489 
8490 
8491 
8492 
8493 
8494 
8495 
8496 
8497 
8498 
8499 
8500 
8501 
8502 
8503 
8504   .globl name; \
8505   name: \
8506     movl $SYS_ 
8507     int $T_SYSCALL; \
8508     ret
8509 
8510 SYSCALL(fork)
8511 SYSCALL(exit)
8512 SYSCALL(wait)
8513 SYSCALL(pipe)
8514 SYSCALL(read)
8515 SYSCALL(write)
8516 SYSCALL(close)
8517 SYSCALL(kill)
8518 SYSCALL(exec)
8519 SYSCALL(open)
8520 SYSCALL(mknod)
8521 SYSCALL(unlink)
8522 SYSCALL(fstat)
8523 SYSCALL(link)
8524 SYSCALL(mkdir)
8525 SYSCALL(chdir)
8526 SYSCALL(dup)
8527 SYSCALL(getpid)
8528 SYSCALL(sbrk)
8529 SYSCALL(sleep)
8530 SYSCALL(uptime)
8531 
8532 
8533 
8534 
8535 
8536 
8537 
8538 
8539 
8540 
8541 
8542 
8543 
8544 
8545 
8546 
8547 
8548 
8549 
8550 
8551 
8552 #include "types.h"
8553 #include "stat.h"
8554 #include "user.h"
8555 #include "fcntl.h"
8556 
8557 char *argv[] = { "sh", 0 };
8558 
8559 int
8560 main(void)
8561 {
8562   int pid, wpid;
8563 
8564   if(open("console", O_RDWR) < 0){
8565     mknod("console", 1, 1);
8566     open("console", O_RDWR);
8567   }
8568   dup(0);  
8569   dup(0);  
8570 
8571   for(;;){
8572     printf(1, "init: starting sh\n");
8573     pid = fork();
8574     if(pid < 0){
8575       printf(1, "init: fork failed\n");
8576       exit();
8577     }
8578     if(pid == 0){
8579       exec("sh", argv);
8580       printf(1, "init: exec sh failed\n");
8581       exit();
8582     }
8583     while((wpid=wait()) >= 0 && wpid != pid)
8584       printf(1, "zombie!\n");
8585   }
8586 }
8587 
8588 
8589 
8590 
8591 
8592 
8593 
8594 
8595 
8596 
8597 
8598 
8599 
8600 
8601 
8602 #include "types.h"
8603 #include "user.h"
8604 #include "fcntl.h"
8605 
8606 
8607 #define EXEC  1
8608 #define REDIR 2
8609 #define PIPE  3
8610 #define LIST  4
8611 #define BACK  5
8612 
8613 #define MAXARGS 10
8614 
8615 struct cmd {
8616   int type;
8617 };
8618 
8619 struct execcmd {
8620   int type;
8621   char *argv[MAXARGS];
8622   char *eargv[MAXARGS];
8623 };
8624 
8625 struct redircmd {
8626   int type;
8627   struct cmd *cmd;
8628   char *file;
8629   char *efile;
8630   int mode;
8631   int fd;
8632 };
8633 
8634 struct pipecmd {
8635   int type;
8636   struct cmd *left;
8637   struct cmd *right;
8638 };
8639 
8640 struct listcmd {
8641   int type;
8642   struct cmd *left;
8643   struct cmd *right;
8644 };
8645 
8646 struct backcmd {
8647   int type;
8648   struct cmd *cmd;
8649 };
8650 int fork1(void);  
8651 void panic(char*);
8652 struct cmd *parsecmd(char*);
8653 
8654 
8655 void
8656 runcmd(struct cmd *cmd)
8657 {
8658   int p[2];
8659   struct backcmd *bcmd;
8660   struct execcmd *ecmd;
8661   struct listcmd *lcmd;
8662   struct pipecmd *pcmd;
8663   struct redircmd *rcmd;
8664 
8665   if(cmd == 0)
8666     exit();
8667 
8668   switch(cmd->type){
8669   default:
8670     panic("runcmd");
8671 
8672   case EXEC:
8673     ecmd = (struct execcmd*)cmd;
8674     if(ecmd->argv[0] == 0)
8675       exit();
8676     exec(ecmd->argv[0], ecmd->argv);
8677     printf(2, "exec %s failed\n", ecmd->argv[0]);
8678     break;
8679 
8680   case REDIR:
8681     rcmd = (struct redircmd*)cmd;
8682     close(rcmd->fd);
8683     if(open(rcmd->file, rcmd->mode) < 0){
8684       printf(2, "open %s failed\n", rcmd->file);
8685       exit();
8686     }
8687     runcmd(rcmd->cmd);
8688     break;
8689 
8690   case LIST:
8691     lcmd = (struct listcmd*)cmd;
8692     if(fork1() == 0)
8693       runcmd(lcmd->left);
8694     wait();
8695     runcmd(lcmd->right);
8696     break;
8697 
8698 
8699 
8700   case PIPE:
8701     pcmd = (struct pipecmd*)cmd;
8702     if(pipe(p) < 0)
8703       panic("pipe");
8704     if(fork1() == 0){
8705       close(1);
8706       dup(p[1]);
8707       close(p[0]);
8708       close(p[1]);
8709       runcmd(pcmd->left);
8710     }
8711     if(fork1() == 0){
8712       close(0);
8713       dup(p[0]);
8714       close(p[0]);
8715       close(p[1]);
8716       runcmd(pcmd->right);
8717     }
8718     close(p[0]);
8719     close(p[1]);
8720     wait();
8721     wait();
8722     break;
8723 
8724   case BACK:
8725     bcmd = (struct backcmd*)cmd;
8726     if(fork1() == 0)
8727       runcmd(bcmd->cmd);
8728     break;
8729   }
8730   exit();
8731 }
8732 
8733 int
8734 getcmd(char *buf, int nbuf)
8735 {
8736   printf(2, "$ ");
8737   memset(buf, 0, nbuf);
8738   gets(buf, nbuf);
8739   if(buf[0] == 0) 
8740     return -1;
8741   return 0;
8742 }
8743 
8744 
8745 
8746 
8747 
8748 
8749 
8750 int
8751 main(void)
8752 {
8753   static char buf[100];
8754   int fd;
8755 
8756   
8757   while((fd = open("console", O_RDWR)) >= 0){
8758     if(fd >= 3){
8759       close(fd);
8760       break;
8761     }
8762   }
8763 
8764   
8765   while(getcmd(buf, sizeof(buf)) >= 0){
8766     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
8767       
8768       buf[strlen(buf)-1] = 0;  
8769       if(chdir(buf+3) < 0)
8770         printf(2, "cannot cd %s\n", buf+3);
8771       continue;
8772     }
8773     if(fork1() == 0)
8774       runcmd(parsecmd(buf));
8775     wait();
8776   }
8777   exit();
8778 }
8779 
8780 void
8781 panic(char *s)
8782 {
8783   printf(2, "%s\n", s);
8784   exit();
8785 }
8786 
8787 int
8788 fork1(void)
8789 {
8790   int pid;
8791 
8792   pid = fork();
8793   if(pid == -1)
8794     panic("fork");
8795   return pid;
8796 }
8797 
8798 
8799 
8800 
8801 
8802 struct cmd*
8803 execcmd(void)
8804 {
8805   struct execcmd *cmd;
8806 
8807   cmd = malloc(sizeof(*cmd));
8808   memset(cmd, 0, sizeof(*cmd));
8809   cmd->type = EXEC;
8810   return (struct cmd*)cmd;
8811 }
8812 
8813 struct cmd*
8814 redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
8815 {
8816   struct redircmd *cmd;
8817 
8818   cmd = malloc(sizeof(*cmd));
8819   memset(cmd, 0, sizeof(*cmd));
8820   cmd->type = REDIR;
8821   cmd->cmd = subcmd;
8822   cmd->file = file;
8823   cmd->efile = efile;
8824   cmd->mode = mode;
8825   cmd->fd = fd;
8826   return (struct cmd*)cmd;
8827 }
8828 
8829 struct cmd*
8830 pipecmd(struct cmd *left, struct cmd *right)
8831 {
8832   struct pipecmd *cmd;
8833 
8834   cmd = malloc(sizeof(*cmd));
8835   memset(cmd, 0, sizeof(*cmd));
8836   cmd->type = PIPE;
8837   cmd->left = left;
8838   cmd->right = right;
8839   return (struct cmd*)cmd;
8840 }
8841 
8842 
8843 
8844 
8845 
8846 
8847 
8848 
8849 
8850 struct cmd*
8851 listcmd(struct cmd *left, struct cmd *right)
8852 {
8853   struct listcmd *cmd;
8854 
8855   cmd = malloc(sizeof(*cmd));
8856   memset(cmd, 0, sizeof(*cmd));
8857   cmd->type = LIST;
8858   cmd->left = left;
8859   cmd->right = right;
8860   return (struct cmd*)cmd;
8861 }
8862 
8863 struct cmd*
8864 backcmd(struct cmd *subcmd)
8865 {
8866   struct backcmd *cmd;
8867 
8868   cmd = malloc(sizeof(*cmd));
8869   memset(cmd, 0, sizeof(*cmd));
8870   cmd->type = BACK;
8871   cmd->cmd = subcmd;
8872   return (struct cmd*)cmd;
8873 }
8874 
8875 
8876 
8877 
8878 
8879 
8880 
8881 
8882 
8883 
8884 
8885 
8886 
8887 
8888 
8889 
8890 
8891 
8892 
8893 
8894 
8895 
8896 
8897 
8898 
8899 
8900 
8901 
8902 char whitespace[] = " \t\r\n\v";
8903 char symbols[] = "<|>&;()";
8904 
8905 int
8906 gettoken(char **ps, char *es, char **q, char **eq)
8907 {
8908   char *s;
8909   int ret;
8910 
8911   s = *ps;
8912   while(s < es && strchr(whitespace, *s))
8913     s++;
8914   if(q)
8915     *q = s;
8916   ret = *s;
8917   switch(*s){
8918   case 0:
8919     break;
8920   case '|':
8921   case '(':
8922   case ')':
8923   case ';':
8924   case '&':
8925   case '<':
8926     s++;
8927     break;
8928   case '>':
8929     s++;
8930     if(*s == '>'){
8931       ret = '+';
8932       s++;
8933     }
8934     break;
8935   default:
8936     ret = 'a';
8937     while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
8938       s++;
8939     break;
8940   }
8941   if(eq)
8942     *eq = s;
8943 
8944   while(s < es && strchr(whitespace, *s))
8945     s++;
8946   *ps = s;
8947   return ret;
8948 }
8949 
8950 int
8951 peek(char **ps, char *es, char *toks)
8952 {
8953   char *s;
8954 
8955   s = *ps;
8956   while(s < es && strchr(whitespace, *s))
8957     s++;
8958   *ps = s;
8959   return *s && strchr(toks, *s);
8960 }
8961 
8962 struct cmd *parseline(char**, char*);
8963 struct cmd *parsepipe(char**, char*);
8964 struct cmd *parseexec(char**, char*);
8965 struct cmd *nulterminate(struct cmd*);
8966 
8967 struct cmd*
8968 parsecmd(char *s)
8969 {
8970   char *es;
8971   struct cmd *cmd;
8972 
8973   es = s + strlen(s);
8974   cmd = parseline(&s, es);
8975   peek(&s, es, "");
8976   if(s != es){
8977     printf(2, "leftovers: %s\n", s);
8978     panic("syntax");
8979   }
8980   nulterminate(cmd);
8981   return cmd;
8982 }
8983 
8984 struct cmd*
8985 parseline(char **ps, char *es)
8986 {
8987   struct cmd *cmd;
8988 
8989   cmd = parsepipe(ps, es);
8990   while(peek(ps, es, "&")){
8991     gettoken(ps, es, 0, 0);
8992     cmd = backcmd(cmd);
8993   }
8994   if(peek(ps, es, ";")){
8995     gettoken(ps, es, 0, 0);
8996     cmd = listcmd(cmd, parseline(ps, es));
8997   }
8998   return cmd;
8999 }
9000 struct cmd*
9001 parsepipe(char **ps, char *es)
9002 {
9003   struct cmd *cmd;
9004 
9005   cmd = parseexec(ps, es);
9006   if(peek(ps, es, "|")){
9007     gettoken(ps, es, 0, 0);
9008     cmd = pipecmd(cmd, parsepipe(ps, es));
9009   }
9010   return cmd;
9011 }
9012 
9013 struct cmd*
9014 parseredirs(struct cmd *cmd, char **ps, char *es)
9015 {
9016   int tok;
9017   char *q, *eq;
9018 
9019   while(peek(ps, es, "<>")){
9020     tok = gettoken(ps, es, 0, 0);
9021     if(gettoken(ps, es, &q, &eq) != 'a')
9022       panic("missing file for redirection");
9023     switch(tok){
9024     case '<':
9025       cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
9026       break;
9027     case '>':
9028       cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
9029       break;
9030     case '+':  
9031       cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
9032       break;
9033     }
9034   }
9035   return cmd;
9036 }
9037 
9038 
9039 
9040 
9041 
9042 
9043 
9044 
9045 
9046 
9047 
9048 
9049 
9050 struct cmd*
9051 parseblock(char **ps, char *es)
9052 {
9053   struct cmd *cmd;
9054 
9055   if(!peek(ps, es, "("))
9056     panic("parseblock");
9057   gettoken(ps, es, 0, 0);
9058   cmd = parseline(ps, es);
9059   if(!peek(ps, es, ")"))
9060     panic("syntax - missing )");
9061   gettoken(ps, es, 0, 0);
9062   cmd = parseredirs(cmd, ps, es);
9063   return cmd;
9064 }
9065 
9066 struct cmd*
9067 parseexec(char **ps, char *es)
9068 {
9069   char *q, *eq;
9070   int tok, argc;
9071   struct execcmd *cmd;
9072   struct cmd *ret;
9073 
9074   if(peek(ps, es, "("))
9075     return parseblock(ps, es);
9076 
9077   ret = execcmd();
9078   cmd = (struct execcmd*)ret;
9079 
9080   argc = 0;
9081   ret = parseredirs(ret, ps, es);
9082   while(!peek(ps, es, "|)&;")){
9083     if((tok=gettoken(ps, es, &q, &eq)) == 0)
9084       break;
9085     if(tok != 'a')
9086       panic("syntax");
9087     cmd->argv[argc] = q;
9088     cmd->eargv[argc] = eq;
9089     argc++;
9090     if(argc >= MAXARGS)
9091       panic("too many args");
9092     ret = parseredirs(ret, ps, es);
9093   }
9094   cmd->argv[argc] = 0;
9095   cmd->eargv[argc] = 0;
9096   return ret;
9097 }
9098 
9099 
9100 
9101 struct cmd*
9102 nulterminate(struct cmd *cmd)
9103 {
9104   int i;
9105   struct backcmd *bcmd;
9106   struct execcmd *ecmd;
9107   struct listcmd *lcmd;
9108   struct pipecmd *pcmd;
9109   struct redircmd *rcmd;
9110 
9111   if(cmd == 0)
9112     return 0;
9113 
9114   switch(cmd->type){
9115   case EXEC:
9116     ecmd = (struct execcmd*)cmd;
9117     for(i=0; ecmd->argv[i]; i++)
9118       *ecmd->eargv[i] = 0;
9119     break;
9120 
9121   case REDIR:
9122     rcmd = (struct redircmd*)cmd;
9123     nulterminate(rcmd->cmd);
9124     *rcmd->efile = 0;
9125     break;
9126 
9127   case PIPE:
9128     pcmd = (struct pipecmd*)cmd;
9129     nulterminate(pcmd->left);
9130     nulterminate(pcmd->right);
9131     break;
9132 
9133   case LIST:
9134     lcmd = (struct listcmd*)cmd;
9135     nulterminate(lcmd->left);
9136     nulterminate(lcmd->right);
9137     break;
9138 
9139   case BACK:
9140     bcmd = (struct backcmd*)cmd;
9141     nulterminate(bcmd->cmd);
9142     break;
9143   }
9144   return cmd;
9145 }
9146 
9147 
9148 
9149 
9150 
9151 
9152 
9153 
9154 
9155 
9156 
9157 
9158 
9159 .code16                       
9160 .globl start
9161 start:
9162   cli                         
9163 
9164   
9165   xorw    %ax,%ax             
9166   movw    %ax,%ds             
9167   movw    %ax,%es             
9168   movw    %ax,%ss             
9169 
9170   
9171   
9172 seta20.1:
9173   inb     $0x64,%al               
9174   testb   $0x2,%al
9175   jnz     seta20.1
9176 
9177   movb    $0xd1,%al               
9178   outb    %al,$0x64
9179 
9180 seta20.2:
9181   inb     $0x64,%al               
9182   testb   $0x2,%al
9183   jnz     seta20.2
9184 
9185   movb    $0xdf,%al               
9186   outb    %al,$0x60
9187 
9188   
9189   
9190   
9191   lgdt    gdtdesc
9192   movl    %cr0, %eax
9193   orl     $CR0_PE, %eax
9194   movl    %eax, %cr0
9195 
9196 
9197 
9198 
9199 
9200   
9201   
9202   
9203   ljmp    $(SEG_KCODE<<3), $start32
9204 
9205 .code32  
9206 start32:
9207   
9208   movw    $(SEG_KDATA<<3), %ax    
9209   movw    %ax, %ds                
9210   movw    %ax, %es                
9211   movw    %ax, %ss                
9212   movw    $0, %ax                 
9213   movw    %ax, %fs                
9214   movw    %ax, %gs                
9215 
9216   
9217   movl    $start, %esp
9218   call    bootmain
9219 
9220   
9221   
9222   movw    $0x8a00, %ax            
9223   movw    %ax, %dx
9224   outw    %ax, %dx
9225   movw    $0x8ae0, %ax            
9226   outw    %ax, %dx
9227 spin:
9228   jmp     spin
9229 
9230 
9231 .p2align 2                                
9232 gdt:
9233   SEG_NULLASM                             
9234   SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)   
9235   SEG_ASM(STA_W, 0x0, 0xffffffff)         
9236 
9237 gdtdesc:
9238   .word   (gdtdesc - gdt - 1)             
9239   .long   gdt                             
9240 
9241 
9242 
9243 
9244 
9245 
9246 
9247 
9248 
9249 
9250 
9251 
9252 
9253 
9254 
9255 
9256 
9257 #include "types.h"
9258 #include "elf.h"
9259 #include "x86.h"
9260 #include "memlayout.h"
9261 
9262 #define SECTSIZE  512
9263 
9264 void readseg(uchar*, uint, uint);
9265 
9266 void
9267 bootmain(void)
9268 {
9269   struct elfhdr *elf;
9270   struct proghdr *ph, *eph;
9271   void (*entry)(void);
9272   uchar* pa;
9273 
9274   elf = (struct elfhdr*)0x10000;  
9275 
9276   
9277   readseg((uchar*)elf, 4096, 0);
9278 
9279   
9280   if(elf->magic != ELF_MAGIC)
9281     return;  
9282 
9283   
9284   ph = (struct proghdr*)((uchar*)elf + elf->phoff);
9285   eph = ph + elf->phnum;
9286   for(; ph < eph; ph++){
9287     pa = (uchar*)ph->paddr;
9288     readseg(pa, ph->filesz, ph->off);
9289     if(ph->memsz > ph->filesz)
9290       stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
9291   }
9292 
9293   
9294   
9295   entry = (void(*)(void))(elf->entry);
9296   entry();
9297 }
9298 
9299 
9300 void
9301 waitdisk(void)
9302 {
9303   
9304   while((inb(0x1F7) & 0xC0) != 0x40)
9305     ;
9306 }
9307 
9308 
9309 void
9310 readsect(void *dst, uint offset)
9311 {
9312   
9313   waitdisk();
9314   outb(0x1F2, 1);   
9315   outb(0x1F3, offset);
9316   outb(0x1F4, offset >> 8);
9317   outb(0x1F5, offset >> 16);
9318   outb(0x1F6, (offset >> 24) | 0xE0);
9319   outb(0x1F7, 0x20);  
9320 
9321   
9322   waitdisk();
9323   insl(0x1F0, dst, SECTSIZE/4);
9324 }
9325 
9326 
9327 
9328 void
9329 readseg(uchar* pa, uint count, uint offset)
9330 {
9331   uchar* epa;
9332 
9333   epa = pa + count;
9334 
9335   
9336   pa -= offset % SECTSIZE;
9337 
9338   
9339   offset = (offset / SECTSIZE) + 1;
9340 
9341   
9342   
9343   
9344   for(; pa < epa; pa += SECTSIZE, offset++)
9345     readsect(pa, offset);
9346 }
9347 
9348 
9349 
